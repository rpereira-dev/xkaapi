<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classKBLASMemoryTree" kind="class" language="C++" prot="public">
    <compoundname>KBLASMemoryTree</compoundname>
    <basecompoundref refid="classKHPTree" prot="public" virt="non-virtual">KHPTree&lt; K, KBLASMemoryTreeNodeSearch&lt; K &gt; &gt;</basecompoundref>
    <basecompoundref refid="classLockable" prot="public" virt="non-virtual">Lockable</basecompoundref>
    <basecompoundref refid="classMemoryCoherencyController" prot="public" virt="non-virtual">MemoryCoherencyController</basecompoundref>
    <innerclass refid="structKBLASMemoryTree_1_1fetch__list__t" prot="public">KBLASMemoryTree::fetch_list_t</innerclass>
    <innerclass refid="structKBLASMemoryTree_1_1fetch__t" prot="public">KBLASMemoryTree::fetch_t</innerclass>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>K</declname>
        <defname>K</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a33ef5ab4c601d79d13c212ce1627ac6c" prot="public" static="no">
        <type><ref refid="classKHPTree" kindref="compound">KHPTree</ref>&lt; K, <ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">KBLASMemoryTreeNodeSearch</ref>&lt; K &gt; &gt;</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::Base =  KHPTree&lt;K, KBLASMemoryTreeNodeSearch&lt;K&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="671" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a1c76e6f40c2f52b1a2f2b366f3b42416" prot="public" static="no">
        <type><ref refid="classKHyperrect" kindref="compound">KHyperrect</ref>&lt; K &gt;</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::Hyperrect =  KHyperrect&lt;K&gt;</definition>
        <argsstring></argsstring>
        <name>Hyperrect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="672" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a823ca8d9ceadb9e08a97c867d8521333" prot="public" static="no">
        <type><ref refid="classKMemoryBlock" kindref="compound">KMemoryBlock</ref>&lt; K &gt;</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::MemoryBlock =  KMemoryBlock&lt;K&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryBlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="673" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a0fee38ed848a8328b54ce3353edc80d0" prot="public" static="no">
        <type><ref refid="classKMemoryForward" kindref="compound">KMemoryForward</ref>&lt; K &gt;</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::MemoryForward =  KMemoryForward&lt;K&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryForward</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="674" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1aa3e4eda24958adfe9bd36fd1c35c55aa" prot="public" static="no">
        <type><ref refid="classKMemoryReplicate" kindref="compound">KMemoryReplicate</ref>&lt; K &gt;</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::MemoryReplicate =  KMemoryReplicate&lt;K&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryReplicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="675" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="675" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a5ef9d300a7a4d8962d907b06eec6389e" prot="public" static="no">
        <type><ref refid="classKMemoryReplicateAllocationView" kindref="compound">KMemoryReplicateAllocationView</ref>&lt; K &gt;</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::MemoryReplicateAllocationView =  KMemoryReplicateAllocationView&lt;K&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryReplicateAllocationView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="676" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a196bc4a0e6626cd76018c7eaf4d91df0" prot="public" static="no">
        <type><ref refid="classKBLASMemoryTreeNode" kindref="compound">KBLASMemoryTreeNode</ref>&lt; K &gt;</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::Node =  KBLASMemoryTreeNode&lt;K&gt;</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="677" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a86336495d83642024ccee23aa7d3414f" prot="public" static="no">
        <type>typename <ref refid="classKHPTree" kindref="compound">KHPTree</ref>&lt; K, <ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">KBLASMemoryTreeNodeSearch</ref>&lt; K &gt; &gt;::<ref refid="classKBLASMemoryTreeNode" kindref="compound">Node</ref></type>
        <definition>using KBLASMemoryTree&lt; K &gt;::NodeBase =  typename KHPTree&lt;K, KBLASMemoryTreeNodeSearch&lt;K&gt; &gt;::Node</definition>
        <argsstring></argsstring>
        <name>NodeBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="678" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a3ecc0540adff2d8042a4d7f43b2fb355" prot="public" static="no">
        <type>typename <ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">KBLASMemoryTreeNodeSearch</ref>&lt; K &gt;::Partite</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::Partite =  typename KBLASMemoryTreeNodeSearch&lt;K&gt;::Partite</definition>
        <argsstring></argsstring>
        <name>Partite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="679" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a285290f1108ca7be63f72b359072d2d5" prot="public" static="no">
        <type>typename <ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">KBLASMemoryTreeNodeSearch</ref>&lt; K &gt;::Partition</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::Partition =  typename KBLASMemoryTreeNodeSearch&lt;K&gt;::Partition</definition>
        <argsstring></argsstring>
        <name>Partition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="680" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a59b59f8f2287c1f26551aa727580b46d" prot="public" static="no">
        <type><ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">KBLASMemoryTreeNodeSearch</ref>&lt; K &gt;</type>
        <definition>using KBLASMemoryTree&lt; K &gt;::Search =  KBLASMemoryTreeNodeSearch&lt;K&gt;</definition>
        <argsstring></argsstring>
        <name>Search</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="681" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a8a65c7cfb19fa75f7540c05a45a21dcd" prot="public" static="no">
        <type>struct <ref refid="structKBLASMemoryTree_1_1fetch__t" kindref="compound">KBLASMemoryTree::fetch_t</ref></type>
        <definition>typedef struct KBLASMemoryTree::fetch_t KBLASMemoryTree&lt; K &gt;::fetch_t</definition>
        <argsstring></argsstring>
        <name>fetch_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="747" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="classKBLASMemoryTree_1a7cac09d6813c4f790758336d745fa805" prot="public" static="no">
        <type>struct <ref refid="structKBLASMemoryTree_1_1fetch__list__t" kindref="compound">KBLASMemoryTree::fetch_list_t</ref></type>
        <definition>typedef struct KBLASMemoryTree::fetch_list_t KBLASMemoryTree&lt; K &gt;::fetch_list_t</definition>
        <argsstring></argsstring>
        <name>fetch_list_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="793" column="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKBLASMemoryTree_1a9a157e015acbfdec3e45b2c063c5d996" prot="public" static="no" mutable="no">
        <type><ref refid="structruntime__t" kindref="compound">runtime_t</ref> *</type>
        <definition>runtime_t* KBLASMemoryTree&lt; K &gt;::runtime</definition>
        <argsstring></argsstring>
        <name>runtime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="702" column="20" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKBLASMemoryTree_1af1d89ac55e7ac5b71e02dd40fe03809e" prot="public" static="no" mutable="no">
        <type><ref refid="classRouter" kindref="compound">Router</ref> *</type>
        <definition>Router* KBLASMemoryTree&lt; K &gt;::router</definition>
        <argsstring></argsstring>
        <name>router</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="705" column="17" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKBLASMemoryTree_1a2260c2c44c582f2081a4ae0bd1306150" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t KBLASMemoryTree&lt; K &gt;::ld</definition>
        <argsstring></argsstring>
        <name>ld</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="708" column="22" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKBLASMemoryTree_1a5eaea105c09d5d8486d3ef7286aab878" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t KBLASMemoryTree&lt; K &gt;::sizeof_type</definition>
        <argsstring></argsstring>
        <name>sizeof_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="711" column="22" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKBLASMemoryTree_1afca64b037cc6c91767bccb5b0b902758" prot="public" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool KBLASMemoryTree&lt; K &gt;::merge_transfers</definition>
        <argsstring></argsstring>
        <name>merge_transfers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="714" column="20" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKBLASMemoryTree_1a99a93f18a0a31aad5f409dd49b83608d" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t KBLASMemoryTree&lt; K &gt;::pagesize</definition>
        <argsstring></argsstring>
        <name>pagesize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="717" column="22" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="717" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKBLASMemoryTree_1afecd5cd633deffff7a69f00cdbe53044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KBLASMemoryTree&lt; K &gt;::KBLASMemoryTree</definition>
        <argsstring>(runtime_t *runtime, const size_t ld, const size_t sizeof_type, const bool merge_transfers)</argsstring>
        <name>KBLASMemoryTree</name>
        <param>
          <type><ref refid="structruntime__t" kindref="compound">runtime_t</ref> *</type>
          <declname>runtime</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>ld</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>sizeof_type</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>merge_transfers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="685" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="685" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1ad66a80c92e8c75510b18959d7430e95c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KBLASMemoryTree&lt; K &gt;::~KBLASMemoryTree</definition>
        <argsstring>()</argsstring>
        <name>~KBLASMemoryTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="699" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="699" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a1066866c1b68d23947b26970ddae52b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structKBLASMemoryTree_1_1fetch__list__t" kindref="compound">fetch_list_t</ref> *</type>
        <definition>fetch_list_t* KBLASMemoryTree&lt; K &gt;::fetch_list_from_partition</definition>
        <argsstring>(Partition &amp;partition)</argsstring>
        <name>fetch_list_from_partition</name>
        <param>
          <type>Partition &amp;</type>
          <declname>partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1066" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1066" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1acc5325d4d07c91f76c8f6908bb48f571" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_list_to_host_setup_partition</definition>
        <argsstring>(Partition &amp;partition)</argsstring>
        <name>fetch_list_to_host_setup_partition</name>
        <param>
          <type>Partition &amp;</type>
          <declname>partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1108" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1108" bodyend="1178"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a2f71e0709dfc360ce89a71d05d205aa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structKBLASMemoryTree_1_1fetch__list__t" kindref="compound">fetch_list_t</ref> *</type>
        <definition>fetch_list_t* KBLASMemoryTree&lt; K &gt;::fetch_list_to_host</definition>
        <argsstring>(access_t *access)</argsstring>
        <name>fetch_list_to_host</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1182" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1182" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1adcb18a2d0435c13b692d3e8b01cf6b81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_access_allocate_eviction</definition>
        <argsstring>(device_global_id_t device_global_id, size_t size)</argsstring>
        <name>fetch_access_allocate_eviction</name>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1213" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1213" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a96263b94e4e83e6ebfa84f8c48b8ffbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarea__chunk__t" kindref="compound">area_chunk_t</ref> *</type>
        <definition>area_chunk_t* KBLASMemoryTree&lt; K &gt;::fetch_access_allocate</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id)</argsstring>
        <name>fetch_access_allocate</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1285" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1285" bodyend="1315"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1abd1514b64208077d9869fefecf7cd0d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_access_create_allocation_views</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id, Partition &amp;partition, area_chunk_t *chunk)</argsstring>
        <name>fetch_access_create_allocation_views</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>Partition &amp;</type>
          <declname>partition</declname>
        </param>
        <param>
          <type><ref refid="structarea__chunk__t" kindref="compound">area_chunk_t</ref> *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1319" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1319" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1ab988295737acc0212357308742091bcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarea__chunk__t" kindref="compound">area_chunk_t</ref> *</type>
        <definition>area_chunk_t* KBLASMemoryTree&lt; K &gt;::fetch_access_find_allocation_continuous</definition>
        <argsstring>(device_global_id_t device_global_id, Partition &amp;partition)</argsstring>
        <name>fetch_access_find_allocation_continuous</name>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>Partition &amp;</type>
          <declname>partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1367" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1367" bodyend="1416"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1ac83fda0a94f9bc796c8c31ec08aea2be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_access_find_allocation</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id, Partition &amp;partition)</argsstring>
        <name>fetch_access_find_allocation</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>Partition &amp;</type>
          <declname>partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1420" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1420" bodyend="1441"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a358685ba709c228faa45c00f1ad79490" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_access_setup_replicates</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id, Search &amp;search)</argsstring>
        <name>fetch_access_setup_replicates</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type><ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">Search</ref> &amp;</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1444" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1444" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1ac2092ecbe1ab71a142d72adf19275ec0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_access_setup_copies</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id, Partition &amp;partition)</argsstring>
        <name>fetch_access_setup_copies</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>Partition &amp;</type>
          <declname>partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1463" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1463" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a05f92d7ddde4c3fdec4bf0854b80e32d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_access_set_coherent</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id, Partition &amp;partition)</argsstring>
        <name>fetch_access_set_coherent</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>Partition &amp;</type>
          <declname>partition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1625" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1625" bodyend="1658"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a63c478f22e0545a0316a8e10087433b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_list_launch_ith</definition>
        <argsstring>(access_t *access, fetch_list_t *list, size_t i)</argsstring>
        <name>fetch_list_launch_ith</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type><ref refid="structKBLASMemoryTree_1_1fetch__list__t" kindref="compound">fetch_list_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1662" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1662" bodyend="1718"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a028e6c39950b1e0507aa419278c01f38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch_list_launch</definition>
        <argsstring>(access_t *access, fetch_list_t *list)</argsstring>
        <name>fetch_list_launch</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type><ref refid="structKBLASMemoryTree_1_1fetch__list__t" kindref="compound">fetch_list_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1721" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1721" bodyend="1727"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a5834d9a82d87717aa121d7edd94a049e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>only_allocates</declname>
            <defname>only_allocates</defname>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structKBLASMemoryTree_1_1fetch__list__t" kindref="compound">fetch_list_t</ref> *</type>
        <definition>fetch_list_t* KBLASMemoryTree&lt; K &gt;::fetch_list_to_device</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id)</argsstring>
        <name>fetch_list_to_device</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1731" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1731" bodyend="1790"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a5cbaa382cb85f4175bbbfff0cf835f82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::fetch</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id)</argsstring>
        <name>fetch</name>
        <reimplements refid="classMemoryCoherencyController_1a3c69810be3defa1d4ed05067d91c46bb">fetch</reimplements>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch the access on the given device </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1794" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1794" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1ac59ecdabd7f8256f1f512c16d7a09a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::allocate_to_device</definition>
        <argsstring>(access_t *access, device_global_id_t device_global_id)</argsstring>
        <name>allocate_to_device</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1846" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1846" bodyend="1853"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1ae32ab972fe94b52d8845aae07e67069f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::invalidate</definition>
        <argsstring>(void)</argsstring>
        <name>invalidate</name>
        <reimplements refid="classMemoryCoherencyController_1a5ab5039c46cb0a6d5134f1e914ea974d">invalidate</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>all replicates must be invalidated </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1859" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1859" bodyend="1863"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1af7121aba235ce39c53b53a3d75816850" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>device_global_id_bitfield_t</type>
        <definition>device_global_id_bitfield_t KBLASMemoryTree&lt; K &gt;::who_owns</definition>
        <argsstring>(access_t *access)</argsstring>
        <name>who_owns</name>
        <reimplements refid="classMemoryCoherencyController_1a61926a7696a17f06a4f0e8635acd27b7">who_owns</reimplements>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1870" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1870" bodyend="1899"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a76c5c8ce75a31b2aff5f319a496a174c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::on_insert</definition>
        <argsstring>(NodeBase *nodebase, Search &amp;search)</argsstring>
        <name>on_insert</name>
        <param>
          <type>NodeBase *</type>
          <declname>nodebase</declname>
        </param>
        <param>
          <type><ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">Search</ref> &amp;</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1906" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1906" bodyend="1936"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a52a0526ddcf87366e9be82b0be87c577" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::on_shrink</definition>
        <argsstring>(NodeBase *nodebase, const Interval &amp;interval, int k)</argsstring>
        <name>on_shrink</name>
        <param>
          <type>NodeBase *</type>
          <declname>nodebase</declname>
        </param>
        <param>
          <type>const <ref refid="classInterval" kindref="compound">Interval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1940" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1940" bodyend="1984"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a9dd7b0e13b42bdbdf5b42c5d3d11f32e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KBLASMemoryTree&lt; K &gt;::intersect_stop_test</definition>
        <argsstring>(NodeBase *nodebase, Search &amp;search, const Hyperrect &amp;h) const</argsstring>
        <name>intersect_stop_test</name>
        <param>
          <type>NodeBase *</type>
          <declname>nodebase</declname>
        </param>
        <param>
          <type><ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">Search</ref> &amp;</type>
          <declname>search</declname>
        </param>
        <param>
          <type>const <ref refid="classKHyperrect" kindref="compound">Hyperrect</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="1990" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="1990" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a6189a847861cfa33ee7c0e49f1725347" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KBLASMemoryTree&lt; K &gt;::on_intersect</definition>
        <argsstring>(NodeBase *nodebase, Search &amp;search, const Hyperrect &amp;h) const</argsstring>
        <name>on_intersect</name>
        <param>
          <type>NodeBase *</type>
          <declname>nodebase</declname>
        </param>
        <param>
          <type><ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">Search</ref> &amp;</type>
          <declname>search</declname>
        </param>
        <param>
          <type>const <ref refid="classKHyperrect" kindref="compound">Hyperrect</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The passed rect is intersecting with &apos;this&apos; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="2009" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="2009" bodyend="2113"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a405d83e6b992b05cf51cc582a3e278bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classKBLASMemoryTreeNode" kindref="compound">Node</ref> *</type>
        <definition>Node* KBLASMemoryTree&lt; K &gt;::new_node</definition>
        <argsstring>(Search &amp;search, const Hyperrect &amp;h, const int k, const Color color) const</argsstring>
        <name>new_node</name>
        <reimplements refid="classKHPTree_1ad74a65d97a18faffe061a9e7c27a7a67">new_node</reimplements>
        <param>
          <type><ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">Search</ref> &amp;</type>
          <declname>search</declname>
        </param>
        <param>
          <type>const <ref refid="classKHyperrect" kindref="compound">Hyperrect</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const Color</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="2116" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="2116" bodyend="2129"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a413b40400b7a33f1082a529657faa3bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKBLASMemoryTreeNode" kindref="compound">Node</ref> *</type>
        <definition>Node* KBLASMemoryTree&lt; K &gt;::new_node</definition>
        <argsstring>(Search &amp;search, const Hyperrect &amp;h, const int k, const Color color, const NodeBase *inherit) const</argsstring>
        <name>new_node</name>
        <param>
          <type><ref refid="classKBLASMemoryTreeNodeSearch" kindref="compound">Search</ref> &amp;</type>
          <declname>search</declname>
        </param>
        <param>
          <type>const <ref refid="classKHyperrect" kindref="compound">Hyperrect</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const Color</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const NodeBase *</type>
          <declname>inherit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="2132" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="2132" bodyend="2148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKBLASMemoryTree_1af477dd1d15f6796fe544d601f1a9c1ed" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void KBLASMemoryTree&lt; K &gt;::fetch_list_reduce</definition>
        <argsstring>(fetch_list_t *list)</argsstring>
        <name>fetch_list_reduce</name>
        <param>
          <type><ref refid="structKBLASMemoryTree_1_1fetch__list__t" kindref="compound">fetch_list_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given two regions &apos;a&apos; and &apos;b&apos; we note &apos;a -&gt; b&apos; if &apos;a&apos; and &apos;b&apos; are consecutive in memory, with &apos;b&apos; being right-after &apos;a&apos;. We note a+b the merged (continuous) memory region.</para>
<para>Given a passed list of region L = [a, b, c, d, e] with a-&gt;c and e-&gt;d, this routine updates the list so that it becomes L = [a+c, b, e+d]</para>
<para>A fetch list element is not only a region, but also has a:<itemizedlist>
<listitem><para>a source device</para>
</listitem><listitem><para>a destinatary device which needs to match between elements so they are merged.</para>
</listitem></itemizedlist>
</para>
<para>Note at this point, the list is a partition of an access, so there cannot be overlap between represented regions</para>
<para>case (1) n --------------<mdash/>&gt; | | | | |_ _ _ _| | | _ _ _ _ | |_ _ _ _| v</para>
<para>or n --------------<mdash/>&gt; | _ _ _ _ | | | | |_ _ _ _| | |_______| | v</para>
<para>or n --------------<mdash/>&gt; | _ _ _ _ _ _ | | | | | |_ _ _ _|_ _| | v</para>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="797" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="797" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1aeee17875cb23447c59a4e40e878c0f86" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void KBLASMemoryTree&lt; K &gt;::fetch_callback_access</definition>
        <argsstring>(runtime_t *runtime, fetch_t *fetch, access_t *access)</argsstring>
        <name>fetch_callback_access</name>
        <param>
          <type><ref refid="structruntime__t" kindref="compound">runtime_t</ref> *</type>
          <declname>runtime</declname>
        </param>
        <param>
          <type><ref refid="structKBLASMemoryTree_1_1fetch__t" kindref="compound">fetch_t</ref> *</type>
          <declname>fetch</declname>
        </param>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="927" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="927" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a6630d861edaa3b190032cdd065a633e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structKBLASMemoryTree_1_1fetch__list__t" kindref="compound">fetch_list_t</ref> *</type>
        <definition>static fetch_list_t* KBLASMemoryTree&lt; K &gt;::fetch_list_new</definition>
        <argsstring>(KBLASMemoryTree *tree, task_wait_counter_type_t capacity)</argsstring>
        <name>fetch_list_new</name>
        <param>
          <type><ref refid="classKBLASMemoryTree" kindref="compound">KBLASMemoryTree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>task_wait_counter_type_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="943" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="943" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classKBLASMemoryTree_1a3c6865cdf6dd468ed4c60d01c65d16cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void KBLASMemoryTree&lt; K &gt;::fetch_callback</definition>
        <argsstring>(void *args[XKRT_CALLBACK_ARGS_MAX])</argsstring>
        <name>fetch_callback</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
          <array>[XKRT_CALLBACK_ARGS_MAX]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="952" column="9" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="952" bodyend="1058"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>Lockable</label>
        <link refid="classLockable"/>
      </node>
      <node id="4">
        <label>MemoryCoherencyController</label>
        <link refid="classMemoryCoherencyController"/>
      </node>
      <node id="2">
        <label>KHPTree&lt; K, KBLASMemoryTreeNodeSearch&lt; K &gt; &gt;</label>
        <link refid="classKHPTree"/>
      </node>
      <node id="1">
        <label>KBLASMemoryTree&lt; K &gt;</label>
        <link refid="classKBLASMemoryTree"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19">
        <label>team_t</label>
        <link refid="structteam__t"/>
        <childnode refid="20" relation="usage">
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>desc</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Lockable</label>
        <link refid="classLockable"/>
      </node>
      <node id="27">
        <label>stream_instruction_t</label>
        <link refid="structstream__instruction__t"/>
        <childnode refid="28" relation="usage">
          <edgelabel>file</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>copy_2D</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>callback</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>copy_1D</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>kern</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>conf_stream_t</label>
        <link refid="structconf__stream__t"/>
      </node>
      <node id="20">
        <label>thread_t</label>
        <link refid="structthread__t"/>
        <childnode refid="20" relation="usage">
          <edgelabel>prev</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>team</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>deque</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>current_task</edgelabel>
          <edgelabel>implicit_task</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>MemoryCoherencyController</label>
        <link refid="classMemoryCoherencyController"/>
      </node>
      <node id="32">
        <label>stream_instruction_copy_1D_t</label>
        <link refid="structstream__instruction__copy__1D__t"/>
      </node>
      <node id="17">
        <label>drivers_t</label>
        <link refid="structdrivers__t"/>
        <childnode refid="18" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>callback_t</label>
        <link refid="structcallback__t"/>
      </node>
      <node id="28">
        <label>stream_instruction_file_t</label>
        <link refid="structstream__instruction__file__t"/>
      </node>
      <node id="26">
        <label>stream_instruction_queue_t</label>
        <link refid="classstream__instruction__queue__t"/>
        <childnode refid="27" relation="usage">
          <edgelabel>instr</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>area_t</label>
        <link refid="structarea__t"/>
        <childnode refid="37" relation="usage">
          <edgelabel>chunk0</edgelabel>
          <edgelabel>free_chunk_list</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>deque_t&lt; task_t *, 4096 &gt;</label>
        <link refid="structdeque__t"/>
      </node>
      <node id="29">
        <label>stream_instruction_copy_2D_t</label>
        <link refid="structstream__instruction__copy__2D__t"/>
        <childnode refid="30" relation="usage">
          <edgelabel>dst_device_view</edgelabel>
          <edgelabel>src_device_view</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>task_formats_t</label>
        <link refid="structtask__formats__t"/>
        <childnode refid="10" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>team_binding_t</label>
        <link refid="structteam__binding__t"/>
      </node>
      <node id="35">
        <label>device_memory_info_t</label>
        <link refid="structdevice__memory__info__t"/>
        <childnode refid="36" relation="usage">
          <edgelabel>area</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>stream_instruction_kernel_t</label>
        <link refid="structstream__instruction__kernel__t"/>
      </node>
      <node id="5">
        <label>KHPTree&lt; K, T, REBALANCE, CUT_ON_INSERT, MAINTAIN_SIZE, MAINTAIN_HEIGHT &gt;::Node::includes_t&lt; MAINTAIN_SIZE, MAINTAIN_HEIGHT &gt;</label>
        <link refid="structKHPTree_1_1Node_1_1includes__t"/>
      </node>
      <node id="12">
        <label>conf_drivers_t</label>
        <link refid="structconf__drivers__t"/>
        <childnode refid="13" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>memory_replica_view_t</label>
        <link refid="structmemory__replica__view__t"/>
      </node>
      <node id="2">
        <label>KHPTree&lt; K, KBLASMemoryTreeNodeSearch&lt; K &gt; &gt;</label>
        <link refid="classKHPTree"/>
        <childnode refid="3" relation="usage">
          <edgelabel>root</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>KHPTree&lt; K, T, REBALANCE, CUT_ON_INSERT, MAINTAIN_SIZE, MAINTAIN_HEIGHT &gt;::Node</label>
        <link refid="classKHPTree_1_1Node"/>
        <childnode refid="4" relation="usage">
          <edgelabel>st</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>includes</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>conf_driver_t</label>
        <link refid="structconf__driver__t"/>
      </node>
      <node id="10">
        <label>task_format_t</label>
        <link refid="structtask__format__t"/>
      </node>
      <node id="14">
        <label>conf_device_t</label>
        <link refid="structconf__device__t"/>
        <childnode refid="15" relation="usage">
          <edgelabel>offloader</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>KBLASMemoryTree&lt; K &gt;</label>
        <link refid="classKBLASMemoryTree"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>runtime</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>router</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>stream_t</label>
        <link refid="classstream__t"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>pending</edgelabel>
          <edgelabel>ready</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>runtime_t</label>
        <link refid="structruntime__t"/>
        <childnode refid="9" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>conf</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>drivers</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>router</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>conf_s</label>
        <link refid="structconf__s"/>
        <childnode refid="12" relation="usage">
          <edgelabel>drivers</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>device</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>mutex_t</label>
        <link refid="structmutex__t"/>
      </node>
      <node id="22">
        <label>task_t</label>
        <link refid="structtask__t"/>
        <childnode refid="22" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>RouterAffinity</label>
        <link refid="classRouterAffinity"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>device_t</label>
        <link refid="structdevice__t"/>
        <childnode refid="20" relation="usage">
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>streams</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>memories</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>conf</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>conf_offloader_t</label>
        <link refid="structconf__offloader__t"/>
        <childnode refid="16" relation="usage">
          <edgelabel>streams</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>KHPTree&lt; K, T, REBALANCE, CUT_ON_INSERT, MAINTAIN_SIZE, MAINTAIN_HEIGHT &gt;::Node::subtree_t</label>
        <link refid="unionKHPTree_1_1Node_1_1subtree__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>children</edgelabel>
          <edgelabel>left</edgelabel>
          <edgelabel>right</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>team_desc_t</label>
        <link refid="structteam__desc__t"/>
        <childnode refid="24" relation="usage">
          <edgelabel>binding</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>area_chunk_t</label>
        <link refid="structarea__chunk__t"/>
        <childnode refid="37" relation="usage">
          <edgelabel>freelink</edgelabel>
          <edgelabel>next</edgelabel>
          <edgelabel>prev</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>driver_t</label>
        <link refid="structdriver__t"/>
        <childnode refid="19" relation="usage">
          <edgelabel>team</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>f_stream_create</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>devices</edgelabel>
          <edgelabel>f_device_create</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>Router</label>
        <link refid="classRouter"/>
      </node>
    </collaborationgraph>
    <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" line="668" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp" bodystart="668" bodyend="2210"/>
    <listofallmembers>
      <member refid="classKBLASMemoryTree_1ac59ecdabd7f8256f1f512c16d7a09a65" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>allocate_to_device</name></member>
      <member refid="classKHPTree_1a91a979bf33389e18a165481490533098" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>balance_fixup</name></member>
      <member refid="classKBLASMemoryTree_1a33ef5ab4c601d79d13c212ce1627ac6c" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>Base</name></member>
      <member refid="classKHPTree_1a645cdbe07df2176280b9ddca1a25f687" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>clear</name></member>
      <member refid="classKHPTree_1a8631623f96c170b9667c8b7be7f6d748" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>compress</name></member>
      <member refid="classKHPTree_1a645facc2c108221de9f113c7ec393b1e" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>cut</name></member>
      <member refid="classKHPTree_1a32dde4d2ccc1d6f14379be651f474e94" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>cut</name></member>
      <member refid="classKHPTree_1a1df85f0b5fc077fff6e355691e858479" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>dump</name></member>
      <member refid="classKHPTree_1a85d271e382f536b43fc7d51623af54e6" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>dump_hyperrect</name></member>
      <member refid="classKHPTree_1a2fce2950146816e0177fc5a0b552cc56" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>export_pdf</name></member>
      <member refid="classKBLASMemoryTree_1a5cbaa382cb85f4175bbbfff0cf835f82" prot="public" virt="virtual"><scope>KBLASMemoryTree</scope><name>fetch</name></member>
      <member refid="classKBLASMemoryTree_1a96263b94e4e83e6ebfa84f8c48b8ffbb" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_access_allocate</name></member>
      <member refid="classKBLASMemoryTree_1adcb18a2d0435c13b692d3e8b01cf6b81" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_access_allocate_eviction</name></member>
      <member refid="classKBLASMemoryTree_1abd1514b64208077d9869fefecf7cd0d3" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_access_create_allocation_views</name></member>
      <member refid="classKBLASMemoryTree_1ac83fda0a94f9bc796c8c31ec08aea2be" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_access_find_allocation</name></member>
      <member refid="classKBLASMemoryTree_1ab988295737acc0212357308742091bcd" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_access_find_allocation_continuous</name></member>
      <member refid="classKBLASMemoryTree_1a05f92d7ddde4c3fdec4bf0854b80e32d" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_access_set_coherent</name></member>
      <member refid="classKBLASMemoryTree_1ac2092ecbe1ab71a142d72adf19275ec0" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_access_setup_copies</name></member>
      <member refid="classKBLASMemoryTree_1a358685ba709c228faa45c00f1ad79490" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_access_setup_replicates</name></member>
      <member refid="classKBLASMemoryTree_1a3c6865cdf6dd468ed4c60d01c65d16cb" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_callback</name></member>
      <member refid="classKBLASMemoryTree_1aeee17875cb23447c59a4e40e878c0f86" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_callback_access</name></member>
      <member refid="classKBLASMemoryTree_1a1066866c1b68d23947b26970ddae52b3" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_from_partition</name></member>
      <member refid="classKBLASMemoryTree_1a028e6c39950b1e0507aa419278c01f38" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_launch</name></member>
      <member refid="classKBLASMemoryTree_1a63c478f22e0545a0316a8e10087433b3" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_launch_ith</name></member>
      <member refid="classKBLASMemoryTree_1a6630d861edaa3b190032cdd065a633e0" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_new</name></member>
      <member refid="classKBLASMemoryTree_1af477dd1d15f6796fe544d601f1a9c1ed" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_reduce</name></member>
      <member refid="classKBLASMemoryTree_1a7cac09d6813c4f790758336d745fa805" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_t</name></member>
      <member refid="classKBLASMemoryTree_1a5834d9a82d87717aa121d7edd94a049e" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_to_device</name></member>
      <member refid="classKBLASMemoryTree_1a2f71e0709dfc360ce89a71d05d205aa3" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_to_host</name></member>
      <member refid="classKBLASMemoryTree_1acc5325d4d07c91f76c8f6908bb48f571" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_list_to_host_setup_partition</name></member>
      <member refid="classKBLASMemoryTree_1a8a65c7cfb19fa75f7540c05a45a21dcd" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>fetch_t</name></member>
      <member refid="classKHPTree_1a11b4afa9a929bf83e85e6daa7d80cbe1" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>foreach_k_child</name></member>
      <member refid="classKHPTree_1af82e0da2d47144b522c31c77dbf9afd6" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>foreach_node</name></member>
      <member refid="classKHPTree_1a99afa6b6de401ffcbe56c08ed27847a1" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>foreach_node</name></member>
      <member refid="classKHPTree_1a1995c180e370c129ec42cf14338b14ba" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>foreach_node_until</name></member>
      <member refid="classKHPTree_1a82847fa5aa750d7a363f8790ca84dd32" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>foreach_node_until</name></member>
      <member refid="classKHPTree_1a17110633f10b6e5ded70ff9b1bd43df2" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>garbage_collector_run</name></member>
      <member refid="classKHPTree_1a9f21fd5772d76128f4f22cae59266397" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>height</name></member>
      <member refid="classKBLASMemoryTree_1a1c76e6f40c2f52b1a2f2b366f3b42416" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>Hyperrect</name></member>
      <member refid="classKHPTree_1ad2cbd49b9a9d99a69ec6b1a49ec5a696" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>insert</name></member>
      <member refid="classKHPTree_1a18a8da3d2e7dad9614e7347fa8cdf04a" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>insert_finalize</name></member>
      <member refid="classKHPTree_1a941b298a07a6cd4f97bd666ef413e805" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>insert_fixup</name></member>
      <member refid="classKHPTree_1a2e208a987fd2f557133f14de1802f5f2" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>insert_from</name></member>
      <member refid="classKHPTree_1a00dc5307f6f3997ea2b78ca16b1e278a" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>insert_from_cut</name></member>
      <member refid="classKHPTree_1a7fc00df50fc440af7c9470f479f245bc" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>intersect</name></member>
      <member refid="classKHPTree_1addbe690b89492d502a241b72121e6a5e" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>intersect_from</name></member>
      <member refid="classKBLASMemoryTree_1a9dd7b0e13b42bdbdf5b42c5d3d11f32e" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>intersect_stop_test</name></member>
      <member refid="classKHPTree_1affa6ba5f1242290c8e41e6c27a7cb4f5" prot="public" virt="pure-virtual" ambiguityscope="KHPTree&lt; K, KBLASMemoryTreeNodeSearch&lt; K &gt; &gt;::"><scope>KBLASMemoryTree</scope><name>intersect_stop_test</name></member>
      <member refid="classKBLASMemoryTree_1ae32ab972fe94b52d8845aae07e67069f" prot="public" virt="virtual"><scope>KBLASMemoryTree</scope><name>invalidate</name></member>
      <member refid="classLockable_1a4fe36c2372ad2ed549b16fde29366e4f" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>is_locked</name></member>
      <member refid="classKBLASMemoryTree_1afecd5cd633deffff7a69f00cdbe53044" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>KBLASMemoryTree</name></member>
      <member refid="classKHPTree_1aa0681deb87db602460de20e6e08b0e3d" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>KHPTree</name></member>
      <member refid="classKBLASMemoryTree_1a2260c2c44c582f2081a4ae0bd1306150" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>ld</name></member>
      <member refid="classLockable_1a094134d306e498c8860df432d5b17be7" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>lock</name></member>
      <member refid="classLockable_1a7cd56864610c61adf8ede6ebfb664442" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>Lockable</name></member>
      <member refid="classLockable_1aaa11b49fcd442045e8e20a0aa73cc417" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>locked</name></member>
      <member refid="classKBLASMemoryTree_1a823ca8d9ceadb9e08a97c867d8521333" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>MemoryBlock</name></member>
      <member refid="classMemoryCoherencyController_1a7f2477d742d596718a166c30940639f7" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>MemoryCoherencyController</name></member>
      <member refid="classKBLASMemoryTree_1a0fee38ed848a8328b54ce3353edc80d0" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>MemoryForward</name></member>
      <member refid="classKBLASMemoryTree_1aa3e4eda24958adfe9bd36fd1c35c55aa" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>MemoryReplicate</name></member>
      <member refid="classKBLASMemoryTree_1a5ef9d300a7a4d8962d907b06eec6389e" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>MemoryReplicateAllocationView</name></member>
      <member refid="classKBLASMemoryTree_1afca64b037cc6c91767bccb5b0b902758" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>merge_transfers</name></member>
      <member refid="classKBLASMemoryTree_1a405d83e6b992b05cf51cc582a3e278bb" prot="public" virt="virtual"><scope>KBLASMemoryTree</scope><name>new_node</name></member>
      <member refid="classKBLASMemoryTree_1a413b40400b7a33f1082a529657faa3bf" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>new_node</name></member>
      <member refid="classKHPTree_1af14dfdeaa506eb34d843c2a5725956a2" prot="public" virt="pure-virtual" ambiguityscope="KHPTree&lt; K, KBLASMemoryTreeNodeSearch&lt; K &gt; &gt;::"><scope>KBLASMemoryTree</scope><name>new_node</name></member>
      <member refid="classKBLASMemoryTree_1a196bc4a0e6626cd76018c7eaf4d91df0" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>Node</name></member>
      <member refid="classKBLASMemoryTree_1a86336495d83642024ccee23aa7d3414f" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>NodeBase</name></member>
      <member refid="classKBLASMemoryTree_1a76c5c8ce75a31b2aff5f319a496a174c" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>on_insert</name></member>
      <member refid="classKHPTree_1ad47d8954f7c55e8bf7c477e878a942aa" prot="public" virt="pure-virtual" ambiguityscope="KHPTree&lt; K, KBLASMemoryTreeNodeSearch&lt; K &gt; &gt;::"><scope>KBLASMemoryTree</scope><name>on_insert</name></member>
      <member refid="classKBLASMemoryTree_1a6189a847861cfa33ee7c0e49f1725347" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>on_intersect</name></member>
      <member refid="classKHPTree_1a1e3e82a2d1c691ea30e49efd98a20b90" prot="public" virt="pure-virtual" ambiguityscope="KHPTree&lt; K, KBLASMemoryTreeNodeSearch&lt; K &gt; &gt;::"><scope>KBLASMemoryTree</scope><name>on_intersect</name></member>
      <member refid="classKBLASMemoryTree_1a52a0526ddcf87366e9be82b0be87c577" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>on_shrink</name></member>
      <member refid="classKHPTree_1a6daa38ff9a3a1f54d87d37c8ec9c7831" prot="public" virt="pure-virtual" ambiguityscope="KHPTree&lt; K, KBLASMemoryTreeNodeSearch&lt; K &gt; &gt;::"><scope>KBLASMemoryTree</scope><name>on_shrink</name></member>
      <member refid="classKBLASMemoryTree_1a99a93f18a0a31aad5f409dd49b83608d" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>pagesize</name></member>
      <member refid="classKBLASMemoryTree_1a3ecc0540adff2d8042a4d7f43b2fb355" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>Partite</name></member>
      <member refid="classKBLASMemoryTree_1a285290f1108ca7be63f72b359072d2d5" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>Partition</name></member>
      <member refid="classKHPTree_1ae56912b4e4e79223f2f60b026db126df" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>post_insert</name></member>
      <member refid="classKHPTree_1a851b2c2c93aca372295bf82a4113a535" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>rbtree_to_vine</name></member>
      <member refid="classKHPTree_1a4bc07f3e8421bc2d7a5818b770865220" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>rebalance</name></member>
      <member refid="classKHPTree_1a8f2376c55bd6ea9ee6c298dc029279ad" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>rebalance</name></member>
      <member refid="classKHPTree_1a7d13ba376c8c085b4916389cb7072903" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>rebalance</name></member>
      <member refid="classKHPTree_1a172e16a08bc86ee14fb73d6c54636d83" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>rebalance_fixup</name></member>
      <member refid="classMemoryCoherencyController_1acb148291779f55c3b68908a1ebd559d0" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>ref</name></member>
      <member refid="classKHPTree_1a5faed503dd9cd8c1de74df65daa9b1f2" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>requires_rebalance</name></member>
      <member refid="classKHPTree_1a87ea9c2be9c64df30165fc72ca03f1f4" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>requires_rebalance</name></member>
      <member refid="classKHPTree_1a90287dda522747eb605ccd36aab54940" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>requires_rebalance</name></member>
      <member refid="classKHPTree_1ae8fb6cf51851ac60b989b543033ee0ed" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>requires_rebalance</name></member>
      <member refid="classKHPTree_1a49754abfb7705e00e88c954ecf87cf66" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>root</name></member>
      <member refid="classKHPTree_1a28c367df73bb52f2814c50b1dedae754" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>rotate_left</name></member>
      <member refid="classKHPTree_1ad42f56fae5c05b0e39823c2324060d1c" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>rotate_right</name></member>
      <member refid="classKBLASMemoryTree_1af1d89ac55e7ac5b71e02dd40fe03809e" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>router</name></member>
      <member refid="classKBLASMemoryTree_1a9a157e015acbfdec3e45b2c063c5d996" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>runtime</name></member>
      <member refid="classKBLASMemoryTree_1a59b59f8f2287c1f26551aa727580b46d" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>Search</name></member>
      <member refid="classKHPTree_1af5844384c523593bf037bfebf526506b" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>size</name></member>
      <member refid="classKBLASMemoryTree_1a5eaea105c09d5d8486d3ef7286aab878" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>sizeof_type</name></member>
      <member refid="classLockable_1a148b8beffd4509bc6ad5cccbbcf030f5" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>spinlock</name></member>
      <member refid="classKHPTree_1a7c687b1db8a555503150dbece0b9fdc7" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>subtree_delete</name></member>
      <member refid="classLockable_1a22833663c856d4f33585fbdf8875435e" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>unlock</name></member>
      <member refid="classMemoryCoherencyController_1a6d4dbd793df6f29b6d244756b67af170" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>unref</name></member>
      <member refid="classKHPTree_1a860206216e6006fcf1ebb16c8e1f51cf" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>update</name></member>
      <member refid="classKHPTree_1aa728f6af7d1ac082d8b27b8b44690aab" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>vine_to_rbtree</name></member>
      <member refid="classKBLASMemoryTree_1af7121aba235ce39c53b53a3d75816850" prot="public" virt="virtual"><scope>KBLASMemoryTree</scope><name>who_owns</name></member>
      <member refid="classKBLASMemoryTree_1ad66a80c92e8c75510b18959d7430e95c" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>~KBLASMemoryTree</name></member>
      <member refid="classKHPTree_1afc612593c72d1f2136e088264e463b23" prot="public" virt="virtual"><scope>KBLASMemoryTree</scope><name>~KHPTree</name></member>
      <member refid="classLockable_1a81d1f6d946286cf508a65ad210d95cc6" prot="public" virt="non-virtual"><scope>KBLASMemoryTree</scope><name>~Lockable</name></member>
      <member refid="classMemoryCoherencyController_1a307931c9cc86432933c104b80a2ebc69" prot="public" virt="virtual"><scope>KBLASMemoryTree</scope><name>~MemoryCoherencyController</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
