<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="task_8hpp" kind="file" language="C++">
    <compoundname>task.hpp</compoundname>
    <includes local="no">atomic</includes>
    <includes local="no">functional</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="consts_8h" local="no">xkrt/consts.h</includes>
    <includes refid="dependency-domain_8hpp" local="no">xkrt/memory/access/dependency-domain.hpp</includes>
    <includes refid="task-format_8h" local="no">xkrt/task/task-format.h</includes>
    <includes refid="logger_8h" local="no">xkrt/logger/logger.h</includes>
    <includes refid="todo_8h" local="no">xkrt/logger/todo.h</includes>
    <includes refid="access_8hpp" local="no">xkrt/memory/access/access.hpp</includes>
    <includes refid="cache-line-size_8hpp" local="no">xkrt/memory/cache-line-size.hpp</includes>
    <includes refid="coherency-controller_8hpp" local="no">xkrt/memory/access/coherency-controller.hpp</includes>
    <includes refid="spinlock_8h" local="no">xkrt/sync/spinlock.h</includes>
    <includedby refid="device_8hpp" local="no">/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/device.hpp</includedby>
    <includedby refid="blas_2dependency-tree_8hpp" local="no">/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/dependency-tree.hpp</includedby>
    <includedby refid="memory-tree_8hpp" local="no">/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp</includedby>
    <includedby refid="interval_2dependency-tree_8hpp" local="no">/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/interval/dependency-tree.hpp</includedby>
    <includedby refid="dependency-map_8hpp" local="no">/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/point/dependency-map.hpp</includedby>
    <includedby refid="register_8h" local="no">/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/register.h</includedby>
    <includedby refid="runtime_8h" local="no">/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h</includedby>
    <includedby refid="thread_8h" local="no">/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/thread/thread.h</includedby>
    <incdepgraph>
      <node id="31">
        <label>xkrt/memory/access/blas/matrix.h</label>
        <link refid="matrix_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>atomic</label>
      </node>
      <node id="9">
        <label>xkrt/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="13">
        <label>xkrt/sync/spinlock.h</label>
        <link refid="spinlock_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="25">
        <label>cassert</label>
      </node>
      <node id="22">
        <label>xkrt/utils/min-max.h</label>
        <link refid="min-max_8h_source"/>
      </node>
      <node id="20">
        <label>xkrt/memory/access/mode.h</label>
        <link refid="mode_8h_source"/>
      </node>
      <node id="19">
        <label>xkrt/memory/access/access.hpp</label>
        <link refid="access_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>xkrt/namespace.h</label>
        <link refid="namespace_8h_source"/>
      </node>
      <node id="11">
        <label>xkrt/logger/logger.h</label>
        <link refid="logger_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>stddef.h</label>
      </node>
      <node id="27">
        <label>ostream</label>
      </node>
      <node id="14">
        <label>xkrt/sync/mem.h</label>
        <link refid="mem_8h_source"/>
      </node>
      <node id="30">
        <label>xkrt/memory/view.hpp</label>
        <link refid="view_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>xkrt/consts.h</label>
        <link refid="consts_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>xkrt/logger/todo.h</label>
        <link refid="todo_8h_source"/>
      </node>
      <node id="12">
        <label>xkrt/support.h</label>
        <link refid="support_8h_source"/>
      </node>
      <node id="32">
        <label>sys/types.h</label>
      </node>
      <node id="21">
        <label>xkrt/memory/access/common/hyperrect.hpp</label>
        <link refid="hyperrect_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>xkrt/memory/access/common/interval.hpp</label>
        <link refid="interval_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>unistd.h</label>
      </node>
      <node id="33">
        <label>vector</label>
      </node>
      <node id="8">
        <label>xkrt/memory/access/dependency-domain.hpp</label>
        <link refid="dependency-domain_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>xkrt/memory/cache-line-size.hpp</label>
        <link refid="cache-line-size_8hpp_source"/>
      </node>
      <node id="15">
        <label>time.h</label>
      </node>
      <node id="26">
        <label>cstdlib</label>
      </node>
      <node id="28">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp</label>
        <link refid="task_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>xkrt/memory/access/coherency-controller.hpp</label>
        <link refid="coherency-controller_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>xkrt/task/task-format.h</label>
        <link refid="task-format_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdio.h</label>
      </node>
      <node id="29">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="13">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/stream.h</label>
        <link refid="stream_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/device.hpp</label>
        <link refid="device_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/driver-host.h</label>
        <link refid="driver-host_8h_source"/>
      </node>
      <node id="3">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/driver-sycl.h</label>
        <link refid="driver-sycl_8h_source"/>
      </node>
      <node id="18">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/point/dependency-map.hpp</label>
        <link refid="dependency-map_8hpp_source"/>
      </node>
      <node id="9">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/memory-tree.hpp</label>
        <link refid="memory-tree_8hpp_source"/>
      </node>
      <node id="7">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/driver-cu.h</label>
        <link refid="driver-cu_8h_source"/>
      </node>
      <node id="5">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/driver-ze-blas.h</label>
        <link refid="driver-ze-blas_8h_source"/>
      </node>
      <node id="10">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h</label>
        <link refid="runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/thread/thread.h</label>
        <link refid="thread_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/driver-cl.h</label>
        <link refid="driver-cl_8h_source"/>
      </node>
      <node id="19">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/register.h</label>
        <link refid="register_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/interval/dependency-tree.hpp</label>
        <link refid="interval_2dependency-tree_8hpp_source"/>
      </node>
      <node id="4">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/driver-ze.h</label>
        <link refid="driver-ze_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/conf/conf.h</label>
        <link refid="conf_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp</label>
        <link refid="task_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/memory/access/blas/dependency-tree.hpp</label>
        <link refid="blas_2dependency-tree_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/driver.h</label>
        <link refid="driver_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/driver/driver-hip.h</label>
        <link refid="driver-hip_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtask__t" prot="public">task_t</innerclass>
    <innerclass refid="structtask__dep__info__t" prot="public">task_dep_info_t</innerclass>
    <innerclass refid="structtask__det__info__t" prot="public">task_det_info_t</innerclass>
    <innerclass refid="structtask__dev__info__t" prot="public">task_dev_info_t</innerclass>
    <innerclass refid="structtask__dom__info__t" prot="public">task_dom_info_t</innerclass>
    <innerclass refid="structtask__mol__info__t" prot="public">task_mol_info_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="task_8hpp_1a6f447f7b72fffd31b758179513f9d0b7" prot="public" static="no">
        <name>LOGGER_DEBUG_TASK_STATE</name>
        <param><defname>task</defname></param>
        <initializer>    do {                                                                                                    \
        LOGGER_DEBUG(&quot;task `%s` is now in state `%s`&quot;, task-&gt;label, task_state_to_str(task-&gt;state.value));  \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="104" column="11" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8hpp_1a52a5a0a268572ee3d5f4a52cc3e39244" prot="public" static="no">
        <name>TASK_MUST_REQUEUE</name>
        <param><defname>T</defname></param>
        <initializer>    do {                                \
        T-&gt;flags |= TASK_FLAG_REQUEUE;  \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="453" column="10" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="453" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="task_8hpp_1a8ba9d7d0e437069fb7e516934b90646a" prot="public" static="no" strong="no">
        <type>uint8_t</type>
        <name>task_state_t</name>
        <enumvalue id="task_8hpp_1a8ba9d7d0e437069fb7e516934b90646aa16a33ee3712c223b7045be8fe4a27a24" prot="public">
          <name>TASK_STATE_ALLOCATED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a8ba9d7d0e437069fb7e516934b90646aa7599a95a86e9c5e3d5a968a793cbf6a0" prot="public">
          <name>TASK_STATE_READY</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a8ba9d7d0e437069fb7e516934b90646aa05b84de1cddaf0ec71152a0450764d06" prot="public">
          <name>TASK_STATE_DATA_FETCHING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a8ba9d7d0e437069fb7e516934b90646aa537d8f8ce69e9c5c044fe16fa3e0d7d0" prot="public">
          <name>TASK_STATE_DATA_FETCHED</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a8ba9d7d0e437069fb7e516934b90646aa403a1303cb11b2344ecb0c89512db5e5" prot="public">
          <name>TASK_STATE_COMPLETED</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a8ba9d7d0e437069fb7e516934b90646aa71234c54635f7184c2119c0a1a8cc9ed" prot="public">
          <name>TASK_STATE_DEALLOCATED</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a8ba9d7d0e437069fb7e516934b90646aac3c959adc9d678e87880ef36b0517a74" prot="public">
          <name>TASK_STATE_MAX</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="70" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="71" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677ce" prot="public" static="no" strong="no">
        <type></type>
        <name>task_flags_t</name>
        <enumvalue id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677cea09bf6e49774c079c3935448f1ec5fe20" prot="public">
          <name>TASK_FLAG_ZERO</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677cea1fdbb9c361c6d78f38021fa1291f892f" prot="public">
          <name>TASK_FLAG_DEPENDENT</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677ceabbb610d8723485ab6fbe05296dd7068e" prot="public">
          <name>TASK_FLAG_DETACHABLE</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677cea33099d0f019c92a84abfc1f5437b8166" prot="public">
          <name>TASK_FLAG_DEVICE</name>
          <initializer>= (1 &lt;&lt; 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677cea2867a34ec3d83f6e403807d0942eacc2" prot="public">
          <name>TASK_FLAG_DOMAIN</name>
          <initializer>= (1 &lt;&lt; 3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677cea12bea0ae6a92ac8d08d162d5ffbdae2c" prot="public">
          <name>TASK_FLAG_MOLDABLE</name>
          <initializer>= (1 &lt;&lt; 4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677cea4a4dfbfda7d66a246c1505d7117bc5a3" prot="public">
          <name>TASK_FLAG_REQUEUE</name>
          <initializer>= (1 &lt;&lt; 7)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8hpp_1a3c298bddedb8067fccaae7e52e1677ceacc036ce06bd8ec4a9db5d21880020b51" prot="public">
          <name>TASK_FLAG_MAX</name>
          <initializer>= (1 &lt;&lt; 8)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task flags. Constraints:<itemizedlist>
<listitem><para>cannot have both TASK_FLAG_DOMAIN and TASK_FLAG_DEVICE </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="116" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="117" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="task_8hpp_1a2648bc2391ce59233ad7314ccebfd236" prot="public" static="no" mutable="no">
        <type>XKRT_NAMESPACE_BEGIN typedef uint16_t</type>
        <definition>XKRT_NAMESPACE_BEGIN typedef uint16_t task_wait_counter_type_t</definition>
        <argsstring></argsstring>
        <name>task_wait_counter_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="63" column="18" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="task_8hpp_1a835501f62ecf5dd8b091caabb70a9098" prot="public" static="no">
        <type>std::atomic&lt; task_wait_counter_type_t &gt;</type>
        <definition>typedef std::atomic&lt;task_wait_counter_type_t&gt; task_wait_counter_t</definition>
        <argsstring></argsstring>
        <name>task_wait_counter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="64" column="21" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1a89d90745821f72f9ebecb1fa96ee702d" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t task_access_counter_t</definition>
        <argsstring></argsstring>
        <name>task_access_counter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="66" column="18" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1a3316947c541655f06442a6591ba8fb1e" prot="public" static="no">
        <type>enum task_state_t</type>
        <definition>typedef enum task_state_t task_state_t</definition>
        <argsstring></argsstring>
        <name>task_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="79" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1a013c58d99c890567ab8e497fd31ccfd3" prot="public" static="no">
        <type>enum task_flags_t</type>
        <definition>typedef enum task_flags_t task_flags_t</definition>
        <argsstring></argsstring>
        <name>task_flags_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task flags. Constraints:<itemizedlist>
<listitem><para>cannot have both TASK_FLAG_DOMAIN and TASK_FLAG_DEVICE </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="132" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1aac4223a01cc6a607c1860109ce4e2c50" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t task_flag_bitfield_t</definition>
        <argsstring></argsstring>
        <name>task_flag_bitfield_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="135" column="17" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1a989e278a815d7ada960572a3e9fad896" prot="public" static="no">
        <type>struct <ref refid="structtask__t" kindref="compound">task_t</ref></type>
        <definition>typedef struct task_t task_t</definition>
        <argsstring></argsstring>
        <name>task_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="174" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1aad09b7c2b072934715ecbcf77185f021" prot="public" static="no">
        <type>struct <ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref></type>
        <definition>typedef struct task_dep_info_t task_dep_info_t</definition>
        <argsstring></argsstring>
        <name>task_dep_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="192" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1a4e97cc093cc4e1d367442a899ce44de8" prot="public" static="no">
        <type>struct <ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref></type>
        <definition>typedef struct task_det_info_t task_det_info_t</definition>
        <argsstring></argsstring>
        <name>task_det_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="199" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1ae2a159594c2836ca21678749e93f9dfd" prot="public" static="no">
        <type>struct <ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref></type>
        <definition>typedef struct task_dev_info_t task_dev_info_t</definition>
        <argsstring></argsstring>
        <name>task_dev_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="216" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1af7a5a57735cc702bbcc1f596a0c9000f" prot="public" static="no">
        <type>struct <ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref></type>
        <definition>typedef struct task_dom_info_t task_dom_info_t</definition>
        <argsstring></argsstring>
        <name>task_dom_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="237" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8hpp_1aae7e0bb3bd6af062b9a2daf837fe7814" prot="public" static="no">
        <type>struct <ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref></type>
        <definition>typedef struct task_mol_info_t task_mol_info_t</definition>
        <argsstring></argsstring>
        <name>task_mol_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="258" column="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="task_8hpp_1aaf9140a3d85be6fcaa77bde3e4cdd24f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* task_state_to_str</definition>
        <argsstring>(task_state_t state)</argsstring>
        <name>task_state_to_str</name>
        <param>
          <type>task_state_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="82" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="82" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a8b7effa866c87e70b670691f88b09396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_dependency_resolve</definition>
        <argsstring>(task_t *task, access_t *access)</argsstring>
        <name>task_dependency_resolve</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>access</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>insert the &apos;access&apos; in the &apos;task&apos; dependency domain, and resolve conflicts with previously resolved tasks </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="262" column="6" declfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" declline="262" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a60e8860f072317fc1014d2aa099f5548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDependencyDomain" kindref="compound">DependencyDomain</ref> *</type>
        <definition>DependencyDomain* task_get_dependency_domain_blas_matrix</definition>
        <argsstring>(task_t *task, size_t ld, size_t sizeof_type)</argsstring>
        <name>task_get_dependency_domain_blas_matrix</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ld</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeof_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="268" column="19" declfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" declline="268" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a620531d5115f5227ed3736965b91ffa4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t task_get_base_size_fallback</definition>
        <argsstring>(task_flag_bitfield_t flags)</argsstring>
        <name>task_get_base_size_fallback</name>
        <param>
          <type>task_flag_bitfield_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="276" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="276" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a8c52aeb4f999e813df0e69158312f24c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>static constexpr size_t task_get_extra_size</definition>
        <argsstring>(const task_flag_bitfield_t flags)</argsstring>
        <name>task_get_extra_size</name>
        <param>
          <type>const task_flag_bitfield_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="284" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="284" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a027090f5951bb979353913b47b7a4244" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>static constexpr size_t task_compute_size</definition>
        <argsstring>(const task_flag_bitfield_t flags, const task_access_counter_t ac)</argsstring>
        <name>task_compute_size</name>
        <param>
          <type>const task_flag_bitfield_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const task_access_counter_t</type>
          <declname>ac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="379" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1adb24412f575e613aedfe3c03534c8d47" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref> *</type>
        <definition>static task_dep_info_t* TASK_DEP_INFO</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>TASK_DEP_INFO</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In case of a task with all flags, its memory is <hruler/>
 | | | <ref refid="structtask__t" kindref="compound">task_t</ref> | <ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref> | <ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref> | <ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref> | accesses | args | |________________________________________________________________________________|</para>
<para>if some flags are removed, builing blocks are removed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="398" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="398" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1aa379e6f2234b89acf02aa94eef5c1c0e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref> *</type>
        <definition>static task_det_info_t* TASK_DET_INFO</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>TASK_DET_INFO</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="405" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="405" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a26d91ee3377ab4982183ed9dcb3040ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref> *</type>
        <definition>static task_dev_info_t* TASK_DEV_INFO</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>TASK_DEV_INFO</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="412" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="412" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1ab28396499d1612b83080404eefcce937" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref> *</type>
        <definition>static task_dom_info_t* TASK_DOM_INFO</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>TASK_DOM_INFO</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="425" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="425" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1aee92ac02726c38a69131bc5fe27fe8f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref> *</type>
        <definition>static task_mol_info_t* TASK_MOL_INFO</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>TASK_MOL_INFO</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="438" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="438" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1aa5665bf5075a5fde4c7b9415a1283c53" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>static constexpr size_t TASK_ACCESSES_OFFSET</definition>
        <argsstring>(const task_flag_bitfield_t flags)</argsstring>
        <name>TASK_ACCESSES_OFFSET</name>
        <param>
          <type>const task_flag_bitfield_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="459" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="459" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a65c445aebea4fee4e1f3e82e79555631" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
        <definition>static access_t* TASK_ACCESSES</definition>
        <argsstring>(const task_t *task, const task_flag_bitfield_t flags)</argsstring>
        <name>TASK_ACCESSES</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const task_flag_bitfield_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="466" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="466" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a03560e5f769a1daf722a9e962096a423" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
        <definition>static access_t* TASK_ACCESSES</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>TASK_ACCESSES</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="472" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="472" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1ab02593e6da475313da355a1f9b69d04b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* TASK_ARGS</definition>
        <argsstring>(const task_t *task, const size_t task_size)</argsstring>
        <name>TASK_ARGS</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>task_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="478" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="478" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a44ffe20851821c4d390fe3b1ab4683f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t TASK_SIZE</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>TASK_SIZE</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="484" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="484" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1af78b2ba5c63ed609aa91b261994c77b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* TASK_ARGS</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>TASK_ARGS</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="496" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a2866f2af3a624a21b6787f8588debb0a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool __task_precedes</definition>
        <argsstring>(task_t *pred, task_t *succ, void(*F)(Args...), Args... args)</argsstring>
        <name>__task_precedes</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>pred</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>succ</declname>
        </param>
        <param>
          <type>void(*)(Args...)</type>
          <declname>F</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="508" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="508" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a2291011709f71faabd6da4fd4ac9afcc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __access_link</definition>
        <argsstring>(access_t *pred, access_t *succ)</argsstring>
        <name>__access_link</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>pred</declname>
        </param>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>succ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="542" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1ab893d6b5cd28c9d001fd239cb4065f0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool __access_precedes</definition>
        <argsstring>(access_t *pred, access_t *succ)</argsstring>
        <name>__access_precedes</name>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>pred</declname>
        </param>
        <param>
          <type><ref refid="classaccess__t" kindref="compound">access_t</ref> *</type>
          <declname>succ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="548" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="548" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a820b1c0ab3c618681054292987ef3717" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void __task_ready</definition>
        <argsstring>(task_t *task, void(*F)(Args..., task_t *), Args... args)</argsstring>
        <name>__task_ready</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>void(*)(Args..., <ref refid="structtask__t" kindref="compound">task_t</ref> *)</type>
          <declname>F</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="574" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="574" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a2bec6d1f847d4875873e771d81ca735d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void __task_commit</definition>
        <argsstring>(task_t *task, void(*F)(Args..., task_t *), Args... args)</argsstring>
        <name>__task_commit</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>void(*)(Args..., <ref refid="structtask__t" kindref="compound">task_t</ref> *)</type>
          <declname>F</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="590" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="590" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a007f702a2557a1b03b7a3dfaa463554b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void __task_fetching</definition>
        <argsstring>(task_wait_counter_type_t n, task_t *task)</argsstring>
        <name>__task_fetching</name>
        <param>
          <type>task_wait_counter_type_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="607" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="607" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="task_8hpp_1a9fc0d6a160648fc675c39ee9c8659e7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void __task_fetched</definition>
        <argsstring>(task_wait_counter_type_t n, task_t *task, void(*F)(Args..., task_t *), Args... args)</argsstring>
        <name>__task_fetched</name>
        <param>
          <type>task_wait_counter_type_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>void(*)(Args..., <ref refid="structtask__t" kindref="compound">task_t</ref> *)</type>
          <declname>F</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" line="626" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp" bodystart="626" bodyend="641"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>Copyright<sp/>2024,2025<sp/>INRIA</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>Contributors<sp/>:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>Thierry<sp/>Gautier,<sp/>thierry.gautier@inrialpes.fr</highlight></codeline>
<codeline lineno="6"><highlight class="comment">**<sp/>Romain<sp/>PEREIRA,<sp/>romain.pereira@inria.fr<sp/>+<sp/>rpereira@anl.gov</highlight></codeline>
<codeline lineno="7"><highlight class="comment">**</highlight></codeline>
<codeline lineno="8"><highlight class="comment">**<sp/>This<sp/>software<sp/>is<sp/>a<sp/>computer<sp/>program<sp/>whose<sp/>purpose<sp/>is<sp/>to<sp/>execute</highlight></codeline>
<codeline lineno="9"><highlight class="comment">**<sp/>blas<sp/>subroutines<sp/>on<sp/>multi-GPUs<sp/>system.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">**</highlight></codeline>
<codeline lineno="11"><highlight class="comment">**<sp/>This<sp/>software<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>CeCILL-C<sp/>license<sp/>under<sp/>French<sp/>law<sp/>and</highlight></codeline>
<codeline lineno="12"><highlight class="comment">**<sp/>abiding<sp/>by<sp/>the<sp/>rules<sp/>of<sp/>distribution<sp/>of<sp/>free<sp/>software.<sp/><sp/>You<sp/>can<sp/><sp/>use,</highlight></codeline>
<codeline lineno="13"><highlight class="comment">**<sp/>modify<sp/>and/<sp/>or<sp/>redistribute<sp/>the<sp/>software<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>CeCILL-C</highlight></codeline>
<codeline lineno="14"><highlight class="comment">**<sp/>license<sp/>as<sp/>circulated<sp/>by<sp/>CEA,<sp/>CNRS<sp/>and<sp/>INRIA<sp/>at<sp/>the<sp/>following<sp/>URL</highlight></codeline>
<codeline lineno="15"><highlight class="comment">**<sp/>&quot;http://www.cecill.info&quot;.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">**<sp/>As<sp/>a<sp/>counterpart<sp/>to<sp/>the<sp/>access<sp/>to<sp/>the<sp/>source<sp/>code<sp/>and<sp/><sp/>rights<sp/>to<sp/>copy,</highlight></codeline>
<codeline lineno="18"><highlight class="comment">**<sp/>modify<sp/>and<sp/>redistribute<sp/>granted<sp/>by<sp/>the<sp/>license,<sp/>users<sp/>are<sp/>provided<sp/>only</highlight></codeline>
<codeline lineno="19"><highlight class="comment">**<sp/>with<sp/>a<sp/>limited<sp/>warranty<sp/><sp/>and<sp/>the<sp/>software&apos;s<sp/>author,<sp/><sp/>the<sp/>holder<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="20"><highlight class="comment">**<sp/>economic<sp/>rights,<sp/><sp/>and<sp/>the<sp/>successive<sp/>licensors<sp/><sp/>have<sp/>only<sp/><sp/>limited</highlight></codeline>
<codeline lineno="21"><highlight class="comment">**<sp/>liability.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">**<sp/>In<sp/>this<sp/>respect,<sp/>the<sp/>user&apos;s<sp/>attention<sp/>is<sp/>drawn<sp/>to<sp/>the<sp/>risks<sp/>associated</highlight></codeline>
<codeline lineno="24"><highlight class="comment">**<sp/>with<sp/>loading,<sp/><sp/>using,<sp/><sp/>modifying<sp/>and/or<sp/>developing<sp/>or<sp/>reproducing<sp/>the</highlight></codeline>
<codeline lineno="25"><highlight class="comment">**<sp/>software<sp/>by<sp/>the<sp/>user<sp/>in<sp/>light<sp/>of<sp/>its<sp/>specific<sp/>status<sp/>of<sp/>free<sp/>software,</highlight></codeline>
<codeline lineno="26"><highlight class="comment">**<sp/>that<sp/>may<sp/>mean<sp/><sp/>that<sp/>it<sp/>is<sp/>complicated<sp/>to<sp/>manipulate,<sp/><sp/>and<sp/><sp/>that<sp/><sp/>also</highlight></codeline>
<codeline lineno="27"><highlight class="comment">**<sp/>therefore<sp/>means<sp/><sp/>that<sp/>it<sp/>is<sp/>reserved<sp/>for<sp/>developers<sp/><sp/>and<sp/><sp/>experienced</highlight></codeline>
<codeline lineno="28"><highlight class="comment">**<sp/>professionals<sp/>having<sp/>in-depth<sp/>computer<sp/>knowledge.<sp/>Users<sp/>are<sp/>therefore</highlight></codeline>
<codeline lineno="29"><highlight class="comment">**<sp/>encouraged<sp/>to<sp/>load<sp/>and<sp/>test<sp/>the<sp/>software&apos;s<sp/>suitability<sp/>as<sp/>regards<sp/>their</highlight></codeline>
<codeline lineno="30"><highlight class="comment">**<sp/>requirements<sp/>in<sp/>conditions<sp/>enabling<sp/>the<sp/>security<sp/>of<sp/>their<sp/>systems<sp/>and/or</highlight></codeline>
<codeline lineno="31"><highlight class="comment">**<sp/>data<sp/>to<sp/>be<sp/>ensured<sp/>and,<sp/><sp/>more<sp/>generally,<sp/>to<sp/>use<sp/>and<sp/>operate<sp/>it<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="32"><highlight class="comment">**<sp/>same<sp/>conditions<sp/>as<sp/>regards<sp/>security.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment">**<sp/>The<sp/>fact<sp/>that<sp/>you<sp/>are<sp/>presently<sp/>reading<sp/>this<sp/>means<sp/>that<sp/>you<sp/>have<sp/>had</highlight></codeline>
<codeline lineno="35"><highlight class="comment">**<sp/>knowledge<sp/>of<sp/>the<sp/>CeCILL-C<sp/>license<sp/>and<sp/>that<sp/>you<sp/>accept<sp/>its<sp/>terms.</highlight></codeline>
<codeline lineno="36"><highlight class="comment">**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__XKRT_TASK_HPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>__XKRT_TASK_HPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/45342776/how-to-include-c11-headers-when-compiling-c-with-gcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cannot<sp/>use<sp/>&lt;stdatomic.h&gt;<sp/>with<sp/>c++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#<sp/>include<sp/>&lt;stdatomic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/consts.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/memory/access/dependency-domain.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/task/task-format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/logger/logger.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/logger/todo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/memory/access/access.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/memory/cache-line-size.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/memory/access/coherency-controller.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xkrt/sync/spinlock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">XKRT_NAMESPACE_BEGIN</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>using<sp/>smaller<sp/>type<sp/>here<sp/>can<sp/>improve<sp/>perf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/>task_wait_counter_type_t;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::atomic&lt;task_wait_counter_type_t&gt;<sp/>task_wait_counter_t;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/>task_access_counter_t;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">static_assert(TASK_MAX_ACCESSES<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>8*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(task_access_counter_t)));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>task<sp/>states<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>task_state_t<sp/>:<sp/>uint8_t</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_STATE_ALLOCATED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task_t<sp/>is<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_STATE_READY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task_t<sp/>data<sp/>can<sp/>be<sp/>fetched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_STATE_DATA_FETCHING<sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task_t<sp/>data<sp/>is<sp/>being<sp/>fetched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_STATE_DATA_FETCHED<sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task_t<sp/>data<sp/>is<sp/>fetched,<sp/>kernel<sp/>can<sp/>be<sp/>executed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_STATE_COMPLETED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task_t<sp/>completed,<sp/>dependences<sp/>can<sp/>be<sp/>resolved<sp/>(kernel<sp/>executed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_STATE_DEALLOCATED<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>5,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task_t<sp/>is<sp/>deallocated<sp/>(virtual<sp/>state,<sp/>never<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_STATE_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_state_t;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="82"><highlight class="normal">task_state_to_str(task_state_t<sp/>state)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(TASK_STATE_ALLOCATED):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;allocated&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(TASK_STATE_READY):</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ready&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(TASK_STATE_DATA_FETCHING):</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;fetching&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(TASK_STATE_DATA_FETCHED):</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;fetched&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(TASK_STATE_COMPLETED):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;completed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(TASK_STATE_DEALLOCATED):</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;deallocated&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>LOGGER_DEBUG_TASK_STATE(task)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOGGER_DEBUG(&quot;task<sp/>`%s`<sp/>is<sp/>now<sp/>in<sp/>state<sp/>`%s`&quot;</highlight><highlight class="normal">,<sp/>task-&gt;label,<sp/>task_state_to_str(task-&gt;state.value));<sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>LOGGER_DEBUG_TASK_STATE(task)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>task_flags_t</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT<sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>0),<sp/></highlight><highlight class="comment">//<sp/>may<sp/>have<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>1),<sp/></highlight><highlight class="comment">//<sp/>completion<sp/>is<sp/>associated<sp/>with<sp/>the<sp/>completion<sp/>of<sp/>user-defined<sp/>external<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>2),<sp/></highlight><highlight class="comment">//<sp/>may<sp/>execute<sp/>on<sp/>a<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>3),<sp/></highlight><highlight class="comment">//<sp/>may<sp/>have<sp/>dependent<sp/>children<sp/>tasks<sp/>-<sp/>in<sp/>such<sp/>case,<sp/>it<sp/>will<sp/>have<sp/>a<sp/>dependency<sp/>and<sp/>a<sp/>memory<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>4),<sp/></highlight><highlight class="comment">//<sp/>the<sp/>task<sp/>may<sp/>be<sp/>split</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>support<sp/>me<sp/>in<sp/>the<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TASK_FLAG_CANCEL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>5),<sp/>//<sp/>cancelled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TASK_FLAG_UNDEFERED<sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>X),<sp/>//<sp/>suspend<sp/>the<sp/>current<sp/>task<sp/>execution<sp/>until<sp/>that<sp/>task<sp/>completed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TASK_FLAG_PERSISTENT<sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>Y),<sp/>//<sp/>persistence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_FLAG_REQUEUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>7),<sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>re-queued<sp/>after<sp/>returning<sp/>from<sp/>its<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>TASK_FLAG_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_flags_t;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>test<sp/>fails<sp/>increase<sp/>size<sp/>of<sp/>&apos;task_flag_bitfield_t&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/>task_flag_bitfield_t;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">static_assert(TASK_FLAG_MAX<sp/>&lt;=<sp/>(1<sp/>&lt;&lt;<sp/>8*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(task_flag_bitfield_t)));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structtask__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="structtask__t" kindref="compound">task_t</ref></highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parent<sp/>task<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>parent;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>children<sp/>counter<sp/>-<sp/>number<sp/>of<sp/>uncompleted<sp/>children<sp/>tasks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::atomic&lt;uint32_t&gt;<sp/>cc;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>task<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spinlock_t<sp/><sp/><sp/><sp/><sp/><sp/>lock;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_state_t<sp/><sp/><sp/><sp/>value;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>state;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>task<sp/>format<sp/>id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_format_id_t<sp/>fmtid;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>task<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_flag_bitfield_t<sp/>flags;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>label[128];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>endif<sp/></highlight><highlight class="comment">/*<sp/>NDEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref>(task_format_id_t<sp/>fmtid,<sp/>task_flag_bitfield_t<sp/>flags)<sp/>:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent(NULL),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc(0),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>{<sp/>.lock<sp/>=<sp/>SPINLOCK_INITIALIZER,<sp/>.value<sp/>=<sp/>TASK_STATE_ALLOCATED<sp/>},</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmtid(fmtid),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags(flags)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>task<sp/>dependencies<sp/>infos<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="structtask__dep__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref></highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>wait<sp/>counter</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>if<sp/>dependent<sp/>task,<sp/>it<sp/>may<sp/>be<sp/>scheduled<sp/>once<sp/>it<sp/>reached<sp/>0</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>if<sp/>detachable<sp/>task,<sp/>it<sp/>is<sp/>completed<sp/>when<sp/>it<sp/>reached<sp/>2</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>task_wait_counter_t<sp/>wc;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>access<sp/>counter<sp/>(number<sp/>of<sp/>accesses)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>task_access_counter_t<sp/>ac;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constructor,<sp/>wc<sp/>is<sp/>initially<sp/>&apos;1&apos;<sp/>as<sp/>task<sp/>must<sp/>be<sp/>commited<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>(task_access_counter_t<sp/>ac)<sp/>:<sp/>wc(1),<sp/>ac(ac)<sp/>{}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>detachable<sp/>counter,<sp/>shared<sp/>with<sp/>&apos;task_dep_info_t&apos;<sp/>if<sp/>the<sp/>task<sp/>is<sp/>both<sp/>DEPENDENT<sp/>and<sp/>DETACHABLE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="structtask__det__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref></highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>task_wait_counter_t<sp/>wc;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref>()<sp/>:<sp/>wc(0)<sp/>{}</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="structtask__dev__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref></highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>worker<sp/>id<sp/>on<sp/>where<sp/>to<sp/>schedule<sp/>once<sp/>ready<sp/>(or<sp/>&apos;UNSPECIFIED_DEVICE_GLOBAL_ID&apos;<sp/>if<sp/>leaving<sp/>the<sp/>decision<sp/>to<sp/>the<sp/>scheduler)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>device_global_id_t<sp/>targeted_device_id;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>:<sp/>move<sp/>the<sp/>&apos;ocr&apos;<sp/>field<sp/>to<sp/>the<sp/>&apos;dep_info&apos;<sp/>:<sp/>it<sp/>is<sp/>tight<sp/>to<sp/>accesses,<sp/>not<sp/>to<sp/>a<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>execute<sp/>on<sp/>the<sp/>device<sp/>that<sp/>owns<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>access<sp/>at<sp/>accesses[ocr_access_index]</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>&apos;UNSPECIFIED_TASK_ACCESS&apos;,<sp/>leave<sp/>the<sp/>decision<sp/>to<sp/>the<sp/>scheduler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>task_access_counter_t<sp/>ocr_access_index;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constructor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>(device_global_id_t<sp/>target,<sp/>task_access_counter_t<sp/>ocr)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>targeted_device_id(target),<sp/>ocr_access_index(ocr)<sp/>{}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>info<sp/>about<sp/>domain<sp/>of<sp/>dependencies<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="structtask__dom__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref></highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dependency<sp/>controller<sp/>-<sp/>only<sp/>the<sp/>thread<sp/>currently<sp/>executing<sp/>the<sp/>task<sp/>may<sp/>read<sp/>this<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDependencyDomain" kindref="compound">DependencyDomain</ref><sp/>*<sp/>point;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classDependencyDomain" kindref="compound">DependencyDomain</ref><sp/>*<sp/>interval;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;DependencyDomain<sp/>*&gt;<sp/>blas;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>deps;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>memory<sp/>controller<sp/>for<sp/>coherency<sp/>-<sp/>all<sp/>threads<sp/>may<sp/>try<sp/>to<sp/>access<sp/>this<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DependencyDomain<sp/>*<sp/>point;<sp/>-<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMemoryCoherencyController" kindref="compound">MemoryCoherencyController</ref><sp/>*<sp/>interval;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MemoryCoherencyController<sp/>*&gt;<sp/>blas;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>mccs;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>()<sp/>:<sp/>deps{},<sp/>mccs{}<sp/>{}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>moldability<sp/>info<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="structtask__mol__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref></highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>true<sp/>if<sp/>that<sp/>task<sp/>should<sp/>be<sp/>split,<sp/>false<sp/>otherwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;bool(<ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*,<sp/><ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*)&gt;<sp/>&amp;<sp/>split_condition;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>task<sp/>args<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>args_size;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>(</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(<ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*,<sp/><ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*)&gt;<sp/>&amp;<sp/>split_condition,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>args_size<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>split_condition(split_condition),</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_size(args_size)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_dependency_resolve(</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*<sp/>access</highlight></codeline>
<codeline lineno="265"><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>retrieve<sp/>the<sp/>dependency<sp/>domain<sp/>of<sp/>the<sp/>given<sp/>blas<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><ref refid="classDependencyDomain" kindref="compound">DependencyDomain</ref><sp/>*<sp/>task_get_dependency_domain_blas_matrix(</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ld,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeof_type</highlight></codeline>
<codeline lineno="272"><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>fallback<sp/>if<sp/>wrong<sp/>flags<sp/>parameter<sp/>-<sp/>https://stackoverflow.com/questions/20461121/constexpr-error-at-compile-time-but-no-overhead-at-run-time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">task_get_base_size_fallback(task_flag_bitfield_t<sp/>flags)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>LOGGER_FATAL(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>task<sp/>flag<sp/>combination:<sp/>`%u`&quot;</highlight><highlight class="normal">,<sp/>flags);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>base<sp/>size<sp/>of<sp/>a<sp/>task<sp/>(without<sp/>arguments<sp/>and<sp/>private<sp/>data)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">task_get_extra_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>task_flag_bitfield_t<sp/>flags)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(flags)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>moldability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.0.0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.0.0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.0.1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.0.1.1<sp/>-<sp/>dep<sp/>and<sp/>det<sp/>share<sp/>&apos;wc&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.1.0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.1.0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.1.1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.1.1.1<sp/>-<sp/>dep<sp/>and<sp/>det<sp/>share<sp/>&apos;wc&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.1.0.0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.1.0.0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.1.0.1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.1.0.1.1<sp/>-<sp/>dep<sp/>and<sp/>det<sp/>share<sp/>&apos;wc&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wtih<sp/>moldability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.0.0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.0.0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.0.1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.0.1.1<sp/>-<sp/>dep<sp/>and<sp/>det<sp/>share<sp/>&apos;wc&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.1.0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.1.0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.1.1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEVICE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.0.1.1.1<sp/>-<sp/>dep<sp/>and<sp/>det<sp/>share<sp/>&apos;wc&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.1.0.0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.1.0.0.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO):</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>1.1.0.1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_MOLDABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DOMAIN<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_ZERO<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DETACHABLE<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_FLAG_DEPENDENT):</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref>)<sp/>+<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref>)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>1.1.0.1.1<sp/>-<sp/>dep<sp/>and<sp/>det<sp/>share<sp/>&apos;wc&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>constexpr,<sp/>if<sp/>we<sp/>reach<sp/>this<sp/>default<sp/>case,<sp/>then<sp/>the<sp/>compiler<sp/>will<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>means<sp/>the<sp/>user<sp/>tried<sp/>an<sp/>invalid<sp/>combination<sp/>of<sp/>capabilities<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>task_get_base_size_fallback(flags);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>sizeof(task_t)<sp/>+<sp/>sizeof(task_dom_info_t)<sp/>+<sp/>sizeof(task_dev_info_t)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0;<sp/><sp/>//<sp/>1.1.0.0<sp/>-<sp/>forbidden<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>sizeof(task_t)<sp/>+<sp/>sizeof(task_dom_info_t)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/>sizeof(task_dep_info_t);<sp/><sp/>//<sp/>1.1.0.1<sp/>-<sp/>forbidden<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>sizeof(task_t)<sp/>+<sp/>sizeof(task_dom_info_t)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/>sizeof(task_dep_info_t);<sp/><sp/>//<sp/>1.1.1.0<sp/>-<sp/>forbidden<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>sizeof(task_t)<sp/>+<sp/>sizeof(task_dom_info_t)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0<sp/>+<sp/>sizeof(task_dep_info_t);<sp/><sp/>//<sp/>1.1.1.1<sp/>-<sp/>forbidden<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Given<sp/>flags<sp/>and<sp/>the<sp/>number<sp/>of<sp/>accesses,<sp/>computes<sp/>(at<sp/>compile-time)<sp/>the<sp/>size</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>in<sp/>bytes<sp/>required<sp/>for<sp/>the<sp/>task<sp/>(without<sp/>args_t)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">task_compute_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>task_flag_bitfield_t<sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>task_access_counter_t<sp/>ac)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__t" kindref="compound">task_t</ref>)<sp/>+<sp/>task_get_extra_size(flags)<sp/>+<sp/>ac*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classaccess__t" kindref="compound">access_t</ref>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>:<sp/>implement<sp/>DEP_INFO,<sp/>DET_INFO,<sp/>...<sp/>with<sp/>a<sp/>`flags`<sp/>argument<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>offset<sp/>at<sp/>compile-time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref><sp/>*</highlight></codeline>
<codeline lineno="398"><highlight class="normal">TASK_DEP_INFO(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref><sp/>*)<sp/>(task<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref><sp/>*</highlight></codeline>
<codeline lineno="405"><highlight class="normal">TASK_DET_INFO(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DETACHABLE);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__det__info__t" kindref="compound">task_det_info_t</ref><sp/>*)<sp/>(task<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref><sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="normal">TASK_DEV_INFO(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><sp/>task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEVICE);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DOMAIN));<sp/><sp/></highlight><highlight class="comment">//<sp/>device<sp/>tasks<sp/>cannot<sp/>have<sp/>dependency<sp/>domains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref><sp/>*)<sp/>(TASK_DEP_INFO(task)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DETACHABLE)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref><sp/>*)<sp/>(TASK_DET_INFO(task)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__dev__info__t" kindref="compound">task_dev_info_t</ref><sp/>*)<sp/>(task<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref><sp/>*</highlight></codeline>
<codeline lineno="425"><highlight class="normal">TASK_DOM_INFO(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><sp/>task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DOMAIN);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEVICE));<sp/><sp/></highlight><highlight class="comment">//<sp/>device<sp/>tasks<sp/>cannot<sp/>have<sp/>dependency<sp/>domains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref><sp/>*)<sp/>(TASK_DEP_INFO(task)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DETACHABLE)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref><sp/>*)<sp/>(TASK_DET_INFO(task)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__dom__info__t" kindref="compound">task_dom_info_t</ref><sp/>*)<sp/>(task<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref><sp/>*</highlight></codeline>
<codeline lineno="438"><highlight class="normal">TASK_MOL_INFO(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><sp/>task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_MOLDABLE);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/><sp/>task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>moldable<sp/>tasks<sp/>must<sp/>have<sp/>accesses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DOMAIN)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref><sp/>*)<sp/>(TASK_DOM_INFO(task)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref><sp/>*)<sp/>(TASK_DEP_INFO(task)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DETACHABLE)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref><sp/>*)<sp/>(TASK_DET_INFO(task)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structtask__mol__info__t" kindref="compound">task_mol_info_t</ref><sp/>*)<sp/>(task<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tells<sp/>the<sp/>runtime<sp/>to<sp/>requeue<sp/>this<sp/>task<sp/>after<sp/>returning<sp/>from<sp/>its<sp/>main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>TASK_MUST_REQUEUE(T)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T-&gt;flags<sp/>|=<sp/>TASK_FLAG_REQUEUE;<sp/><sp/>\</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">TASK_ACCESSES_OFFSET(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>task_flag_bitfield_t<sp/>flags)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accesses<sp/>must<sp/>be<sp/>stored<sp/>right<sp/>after<sp/>the<sp/>task<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__t" kindref="compound">task_t</ref>)<sp/>+<sp/>task_get_extra_size(flags);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*</highlight></codeline>
<codeline lineno="466"><highlight class="normal">TASK_ACCESSES(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>task_flag_bitfield_t<sp/>flags)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*)<sp/>(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>task)<sp/>+<sp/>TASK_ACCESSES_OFFSET(flags));</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*</highlight></codeline>
<codeline lineno="472"><highlight class="normal">TASK_ACCESSES(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TASK_ACCESSES(task,<sp/>task-&gt;flags);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="478"><highlight class="normal">TASK_ARGS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>task_size)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>task)<sp/>+<sp/>task_size);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">TASK_SIZE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref><sp/>*<sp/>dep<sp/>=<sp/>TASK_DEP_INFO(task);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__t" kindref="compound">task_t</ref>)<sp/>+<sp/>task_get_extra_size(task-&gt;flags)<sp/>+<sp/>dep-&gt;ac*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classaccess__t" kindref="compound">access_t</ref>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtask__t" kindref="compound">task_t</ref>)<sp/>+<sp/>task_get_extra_size(task-&gt;flags);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="496"><highlight class="normal">TASK_ARGS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TASK_ARGS(task,<sp/>TASK_SIZE(task));</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="comment">//<sp/>Methods<sp/>to<sp/>setup<sp/>dependencies<sp/>//</highlight></codeline>
<codeline lineno="504"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pred<sp/>precedes<sp/>succ<sp/>-<sp/>call<sp/>&apos;F(args)&apos;<sp/>if<sp/>&apos;pred&apos;<sp/>isnt<sp/>completed<sp/>yet<sp/>in<sp/>a<sp/>lock<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">__task_precedes(</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>pred,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>succ,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*F)(Args...),</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>Args...<sp/>args</highlight></codeline>
<codeline lineno="513"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pred);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(succ);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pred<sp/>!=<sp/>succ);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pred-&gt;state.value<sp/>&gt;=<sp/>TASK_STATE_ALLOCATED);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(succ-&gt;state.value<sp/>&gt;=<sp/>TASK_STATE_ALLOCATED);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pred-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(succ-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>r<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred-&gt;state.value<sp/>&lt;<sp/>TASK_STATE_COMPLETED)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPINLOCK_LOCK(pred-&gt;state.lock);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred-&gt;state.value<sp/>&lt;<sp/>TASK_STATE_COMPLETED)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOGGER_DEBUG(</highlight><highlight class="stringliteral">&quot;Dependency:<sp/>`%s`<sp/>-&gt;<sp/>`%s`&quot;</highlight><highlight class="normal">,<sp/>pred-&gt;label,<sp/>succ-&gt;label);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref><sp/>*<sp/>sdep<sp/>=<sp/>TASK_DEP_INFO(succ);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdep-&gt;wc.fetch_add(1,<sp/>std::memory_order_seq_cst);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPINLOCK_UNLOCK(pred-&gt;state.lock);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">__access_link(<ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*<sp/>pred,<sp/><ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*<sp/>succ)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>pred-&gt;successors.push_back(succ);</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">__access_precedes(<ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*<sp/>pred,<sp/><ref refid="classaccess__t" kindref="compound">access_t</ref><sp/>*<sp/>succ)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>succ<sp/>must<sp/>be<sp/>a<sp/>dependent<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(succ-&gt;task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>succ<sp/>must<sp/>have<sp/>a<sp/>wc&gt;0<sp/>at<sp/>this<sp/>point:<sp/>we<sp/>are<sp/>still<sp/>processing<sp/>dependencies,<sp/>it<sp/>cannot<sp/>be<sp/>scheduled<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(TASK_DEP_INFO(succ-&gt;task)-&gt;wc<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>succ<sp/>has<sp/>reached<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(TASK_DEP_INFO(succ-&gt;task)-&gt;wc<sp/>&lt;<sp/>((1<sp/>&lt;&lt;<sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(task_wait_counter_type_t)))<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>redundant<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred-&gt;successors.size()<sp/>&amp;&amp;<sp/>pred-&gt;successors.back()-&gt;task<sp/>==<sp/>succ-&gt;task)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__task_precedes(pred-&gt;task,<sp/>succ-&gt;task,<sp/>__access_link,<sp/>pred,<sp/>succ);</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="comment">//<sp/>Methods<sp/>to<sp/>transition<sp/>the<sp/>task<sp/>//</highlight></codeline>
<codeline lineno="570"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mark<sp/>the<sp/>task<sp/>ready<sp/>and<sp/>call<sp/>F(args)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">__task_ready(</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*F)(Args...,<sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*),</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>Args...<sp/>args</highlight></codeline>
<codeline lineno="578"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(task-&gt;state.value<sp/>==<sp/>TASK_STATE_ALLOCATED);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT)<sp/>||<sp/>(TASK_DEP_INFO(task)-&gt;wc.load()<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>task-&gt;state.value<sp/>=<sp/>TASK_STATE_READY;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>LOGGER_DEBUG_TASK_STATE(task);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F(std::forward&lt;Args&gt;(args)...,<sp/>task);</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>commit<sp/>the<sp/>task<sp/>and<sp/>call<sp/>F(args)<sp/>if<sp/>it<sp/>is<sp/>now<sp/>ready<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">__task_commit(</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*F)(Args...,<sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*),</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>Args...<sp/>args</highlight></codeline>
<codeline lineno="594"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(task-&gt;state.value<sp/>==<sp/>TASK_STATE_ALLOCATED);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref><sp/>*<sp/>dep<sp/>=<sp/>TASK_DEP_INFO(task);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dep-&gt;wc.fetch_sub(1,<sp/>std::memory_order_seq_cst)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__task_ready(task,<sp/>F,<sp/>args...);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__task_ready(task,<sp/>F,<sp/>args...);</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">__task_fetching(</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>task_wait_counter_type_t<sp/>n,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task</highlight></codeline>
<codeline lineno="610"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref><sp/>*<sp/>dep<sp/>=<sp/>TASK_DEP_INFO(task);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dep-&gt;wc.fetch_add(n,<sp/>std::memory_order_seq_cst)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(task-&gt;state.value<sp/>==<sp/>TASK_STATE_READY<sp/>||</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;state.value<sp/>==<sp/>TASK_STATE_ALLOCATED);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;state.value<sp/>=<sp/>TASK_STATE_DATA_FETCHING;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOGGER_DEBUG_TASK_STATE(task);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>notify<sp/>that<sp/>&apos;n&apos;<sp/>accesses<sp/>had<sp/>been<sp/>fetched.<sp/>If<sp/>all<sp/>accesses<sp/>were<sp/>fetched,</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*<sp/>then<sp/>mark<sp/>the<sp/>task<sp/>as<sp/>&apos;fetched&apos;<sp/>and<sp/>call<sp/>F(...)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">__task_fetched(</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>task_wait_counter_type_t<sp/>n,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*<sp/>task,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*F)(Args...,<sp/><ref refid="structtask__t" kindref="compound">task_t</ref><sp/>*),</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>Args...<sp/>args</highlight></codeline>
<codeline lineno="631"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(task-&gt;state.value<sp/>==<sp/>TASK_STATE_DATA_FETCHING);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(task-&gt;flags<sp/>&amp;<sp/>TASK_FLAG_DEPENDENT);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__dep__info__t" kindref="compound">task_dep_info_t</ref><sp/>*<sp/>dep<sp/>=<sp/>TASK_DEP_INFO(task);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dep-&gt;wc.fetch_sub(n,<sp/>std::memory_order_seq_cst)<sp/>==<sp/>n)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;state.value<sp/>=<sp/>TASK_STATE_DATA_FETCHED;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOGGER_DEBUG_TASK_STATE(task);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F(std::forward&lt;Args&gt;(args)...,<sp/>task);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">XKRT_NAMESPACE_END</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif<sp/></highlight><highlight class="comment">/*<sp/>__XKRT_TASK_HPP__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/task/task.hpp"/>
  </compounddef>
</doxygen>
