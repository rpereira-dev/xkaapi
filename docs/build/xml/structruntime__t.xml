<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structruntime__t" kind="struct" language="C++" prot="public">
    <compoundname>runtime_t</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structruntime__t_1a109e8744c74b15b0a1944c40f39e89a9" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; runtime_state_t &gt;</type>
        <definition>std::atomic&lt;runtime_state_t&gt; runtime_t::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="68" column="17" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1a6db76aa6a655cc85f15de99efa40b0f5" prot="public" static="no" mutable="no">
        <type><ref refid="structdrivers__t" kindref="compound">drivers_t</ref></type>
        <definition>drivers_t runtime_t::drivers</definition>
        <argsstring></argsstring>
        <name>drivers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="71" column="15" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1aff19f16b387a560d57911083873795fb" prot="public" static="no" mutable="no">
        <type><ref refid="structtask__formats__t" kindref="compound">task_formats_t</ref></type>
        <definition>task_formats_t runtime_t::list</definition>
        <argsstring></argsstring>
        <name>list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="75" column="24" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1ac592ac6ade0c7dd6516492204697508a" prot="public" static="no" mutable="no">
        <type>task_format_id_t</type>
        <definition>task_format_id_t runtime_t::copy_async</definition>
        <argsstring></argsstring>
        <name>copy_async</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="76" column="26" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1a6ef8562e582140ce9e818b24109db7f3" prot="public" static="no" mutable="no">
        <type>task_format_id_t</type>
        <definition>task_format_id_t runtime_t::host_capture</definition>
        <argsstring></argsstring>
        <name>host_capture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="77" column="26" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1a021f2e2153083d0652948c97ae3159ae" prot="public" static="no" mutable="no">
        <type>task_format_id_t</type>
        <definition>task_format_id_t runtime_t::memory_touch_async</definition>
        <argsstring></argsstring>
        <name>memory_touch_async</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="78" column="26" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1aa77eb6c2cdb9bdf72e736f0e41f16a68" prot="public" static="no" mutable="no">
        <type>task_format_id_t</type>
        <definition>task_format_id_t runtime_t::memory_register_async</definition>
        <argsstring></argsstring>
        <name>memory_register_async</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="79" column="26" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1aa56834204f18d66330bb1a6ad9f739f6" prot="public" static="no" mutable="no">
        <type>task_format_id_t</type>
        <definition>task_format_id_t runtime_t::memory_unregister_async</definition>
        <argsstring></argsstring>
        <name>memory_unregister_async</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="80" column="26" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1ac9ab04a270e98b3780068daf780fb1c3" prot="public" static="no" mutable="no">
        <type>task_format_id_t</type>
        <definition>task_format_id_t runtime_t::file_read_async</definition>
        <argsstring></argsstring>
        <name>file_read_async</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="81" column="26" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1a5b4978ba7768258badf5dd6ef260a6b3" prot="public" static="no" mutable="no">
        <type>task_format_id_t</type>
        <definition>task_format_id_t runtime_t::file_write_async</definition>
        <argsstring></argsstring>
        <name>file_write_async</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="82" column="26" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1ab7abe366c39d395ead4fe497760fbd35" prot="public" static="no" mutable="no">
        <type>struct runtime_t::@54</type>
        <definition>struct runtime_t::@54 runtime_t::formats</definition>
        <argsstring></argsstring>
        <name>formats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="83" column="13"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1a52313ecd23346d2ec1eebbf53d2aa9ed" prot="public" static="no" mutable="no">
        <type><ref refid="structconf__s" kindref="compound">conf_t</ref></type>
        <definition>conf_t runtime_t::conf</definition>
        <argsstring></argsstring>
        <name>conf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="86" column="12" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1abf9e7d0e4af748ae32237010ff081f97" prot="public" static="no" mutable="no">
        <type><ref refid="classRouterAffinity" kindref="compound">RouterAffinity</ref></type>
        <definition>RouterAffinity runtime_t::router</definition>
        <argsstring></argsstring>
        <name>router</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="89" column="20" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structruntime__t_1a931d6fd7b67b9eda8bbdc42385e0ec31" prot="public" static="no" mutable="no">
        <type>hwloc_topology_t</type>
        <definition>hwloc_topology_t runtime_t::topology</definition>
        <argsstring></argsstring>
        <name>topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="97" column="22" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structruntime__t_1a1bd05b1239fcce4707f9411a4619ee9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::init</definition>
        <argsstring>(void)</argsstring>
        <name>init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="108" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a26822d65e315bf3cc26e9a587622616f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::deinit</definition>
        <argsstring>(void)</argsstring>
        <name>deinit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="111" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a87c58b87e6b2c3c433b55dac96496794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::reset</definition>
        <argsstring>(void)</argsstring>
        <name>reset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="114" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a03e2cc271e158eeae0fe699cdb6f9be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classstream__t" kindref="compound">stream_t</ref> *</type>
        <definition>stream_t* runtime_t::copy</definition>
        <argsstring>(const device_global_id_t device_global_id, const size_t size, const device_global_id_t dst_device_global_id, const uintptr_t dst_device_addr, const device_global_id_t src_device_global_id, const uintptr_t src_device_addr, const callback_t &amp;callback)</argsstring>
        <name>copy</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const device_global_id_t</type>
          <declname>dst_device_global_id</declname>
        </param>
        <param>
          <type>const uintptr_t</type>
          <declname>dst_device_addr</declname>
        </param>
        <param>
          <type>const device_global_id_t</type>
          <declname>src_device_global_id</declname>
        </param>
        <param>
          <type>const uintptr_t</type>
          <declname>src_device_addr</declname>
        </param>
        <param>
          <type>const <ref refid="structcallback__t" kindref="compound">callback_t</ref> &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="121" column="15"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ad70f3e8f5f904524730829b0c8827f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classstream__t" kindref="compound">stream_t</ref> *</type>
        <definition>stream_t* runtime_t::copy</definition>
        <argsstring>(const device_global_id_t device_global_id, const memory_view_t &amp;host_view, const device_global_id_t dst_device_global_id, const memory_replica_view_t &amp;dst_device_view, const device_global_id_t src_device_global_id, const memory_replica_view_t &amp;src_device_view, const callback_t &amp;callback)</argsstring>
        <name>copy</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>const <ref refid="structmatrix__tile__t" kindref="compound">memory_view_t</ref> &amp;</type>
          <declname>host_view</declname>
        </param>
        <param>
          <type>const device_global_id_t</type>
          <declname>dst_device_global_id</declname>
        </param>
        <param>
          <type>const <ref refid="structmemory__replica__view__t" kindref="compound">memory_replica_view_t</ref> &amp;</type>
          <declname>dst_device_view</declname>
        </param>
        <param>
          <type>const device_global_id_t</type>
          <declname>src_device_global_id</declname>
        </param>
        <param>
          <type>const <ref refid="structmemory__replica__view__t" kindref="compound">memory_replica_view_t</ref> &amp;</type>
          <declname>src_device_view</declname>
        </param>
        <param>
          <type>const <ref refid="structcallback__t" kindref="compound">callback_t</ref> &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="132" column="15"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a18b9d6a2be59ee0c31e4897a53cbb842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::distribute_async</definition>
        <argsstring>(distribution_type_t type, void *ptr, size_t size, size_t nb, size_t h)</argsstring>
        <name>distribute_async</name>
        <param>
          <type>distribution_type_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="147" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a02d61a092da536eb1ee4a0b31c8d062b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::distribute_async</definition>
        <argsstring>(distribution_type_t type, void **ptr, size_t chunk_size, unsigned int n)</argsstring>
        <name>distribute_async</name>
        <param>
          <type>distribution_type_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chunk_size</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="155" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a7e2113f1ada61e884c729808868c698a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::distribute_async</definition>
        <argsstring>(distribution_type_t type, matrix_storage_t storage, void *ptr, size_t ld, size_t m, size_t n, size_t mb, size_t nb, size_t sizeof_type, size_t hx, size_t hy)</argsstring>
        <name>distribute_async</name>
        <param>
          <type>distribution_type_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>matrix_storage_t</type>
          <declname>storage</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ld</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>mb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeof_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="163" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a5b1f4d670531c86f34f6ff98171a3ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::file_read_async</definition>
        <argsstring>(int fd, void *buffer, size_t n, unsigned int nchunks)</argsstring>
        <name>file_read_async</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nchunks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a task that reads &apos;n&apos; bytes from the file descriptor &apos;fd&apos; , and write to the &apos;buffer&apos; memory.</para>
<para>Task&apos; access is <computeroutput>write: <ref refid="classInterval" kindref="compound">Interval(buffer, n)</ref></computeroutput></para>
<para>Dependencies may be released early if nchunks &gt; 1 Example: if nchunks == 1, then dependencies are released once &apos;n&apos; bytes got read if nchunks == 2, then dependencies are released twice, on<itemizedlist>
<listitem><para><ref refid="classInterval" kindref="compound">Interval</ref>(buffer , n/2) - once it has been read</para>
</listitem><listitem><para><ref refid="classInterval" kindref="compound">Interval</ref>(buffer + n/2, n/2) - once it has been read </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="190" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a0dd90b23d01ddf8ce39ebf7577898528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::file_write_async</definition>
        <argsstring>(int fd, void *buffer, size_t n, unsigned int nchunks)</argsstring>
        <name>file_write_async</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nchunks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="191" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a2887c5b63ec50ea985033285e70a3f7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::file_foreach_chunk</definition>
        <argsstring>(void *buffer, const size_t total_size, size_t nchunks, const std::function&lt; void(uintptr_t, uintptr_t)&gt; &amp;func)</argsstring>
        <name>file_foreach_chunk</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>total_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nchunks</declname>
        </param>
        <param>
          <type>const std::function&lt; void(uintptr_t, uintptr_t)&gt; &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="193" column="17" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="193" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aade95bbdc547b8bbd4dab91cd5251489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_device_preallocate_ensure</definition>
        <argsstring>(const device_global_id_t device_global_id, const int memory_id)</argsstring>
        <name>memory_device_preallocate_ensure</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>memory_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="222" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a9ec25bb23ad5afd8c278ab4f277d20e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarea__chunk__t" kindref="compound">area_chunk_t</ref> *</type>
        <definition>area_chunk_t* runtime_t::memory_device_allocate_on</definition>
        <argsstring>(const device_global_id_t device_global_id, const size_t size, const int memory_id)</argsstring>
        <name>memory_device_allocate_on</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>memory_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="225" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a3e647efeb9794a8cab492819e79bbcfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarea__chunk__t" kindref="compound">area_chunk_t</ref> *</type>
        <definition>area_chunk_t* runtime_t::memory_device_allocate</definition>
        <argsstring>(const device_global_id_t device_global_id, const size_t size)</argsstring>
        <name>memory_device_allocate</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="228" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1adb6398ebad83a9fe339ae041adab7dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_device_deallocate</definition>
        <argsstring>(const device_global_id_t device_global_id, area_chunk_t *chunk)</argsstring>
        <name>memory_device_deallocate</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type><ref refid="structarea__chunk__t" kindref="compound">area_chunk_t</ref> *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="231" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aa901230cee3e970454ccc716a3caa755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_device_deallocate_all</definition>
        <argsstring>(const device_global_id_t device_global_id)</argsstring>
        <name>memory_device_deallocate_all</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="234" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a08a41b1b850328cf73a2e8bf792dcd13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* runtime_t::memory_host_allocate</definition>
        <argsstring>(const device_global_id_t device_global_id, const size_t size)</argsstring>
        <name>memory_host_allocate</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="237" column="11"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1af3f7a56f268ea2397f6c472612fb4002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_host_deallocate</definition>
        <argsstring>(const device_global_id_t device_global_id, void *mem, const size_t size)</argsstring>
        <name>memory_host_deallocate</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aed705264490216e1031214005e3918c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* runtime_t::memory_unified_allocate</definition>
        <argsstring>(const device_global_id_t device_global_id, const size_t size)</argsstring>
        <name>memory_unified_allocate</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="243" column="11"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ac222cca87a19fe46023151d2f2feb89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_unified_deallocate</definition>
        <argsstring>(const device_global_id_t device_global_id, void *mem, const size_t size)</argsstring>
        <name>memory_unified_deallocate</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="246" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a2581df6601d2d592a5753ef9d06329bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_replicate_coherent</definition>
        <argsstring>(device_global_id_t device_global_id, void *ptr, size_t size)</argsstring>
        <name>memory_replicate_coherent</name>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="253" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ae6710af2a5845ff6613d31a4868789b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_replicate_coherent</definition>
        <argsstring>(device_global_id_t device_global_id, matrix_storage_t storage, void *ptr, size_t ld, size_t m, size_t n, size_t sizeof_type)</argsstring>
        <name>memory_replicate_coherent</name>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>matrix_storage_t</type>
          <declname>storage</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ld</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeof_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="254" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a7ad1e015c2ac270d444c50217ce0e87c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_replicate_noncoherent</definition>
        <argsstring>(device_global_id_t device_global_id, void *ptr, size_t size)</argsstring>
        <name>memory_replicate_noncoherent</name>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="257" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a6efc57bb7f68c9ad2c02614db011ce44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_replicate_noncoherent</definition>
        <argsstring>(device_global_id_t device_global_id, matrix_storage_t storage, void *ptr, size_t ld, size_t m, size_t n, size_t sizeof_type)</argsstring>
        <name>memory_replicate_noncoherent</name>
        <param>
          <type>device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type>matrix_storage_t</type>
          <declname>storage</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ld</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeof_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="258" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ac665d5425fe061b9fadc5d3c25b7bf75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_host_coherent_async</definition>
        <argsstring>(void *ptr, size_t size)</argsstring>
        <name>memory_host_coherent_async</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="265" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1af32b58e45f9bd1d9780a0d0b2ea8e157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::memory_host_coherent_async</definition>
        <argsstring>(matrix_storage_t storage, void *ptr, size_t ld, size_t m, size_t n, size_t sizeof_type)</argsstring>
        <name>memory_host_coherent_async</name>
        <param>
          <type>matrix_storage_t</type>
          <declname>storage</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ld</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeof_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="266" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a1dc55af8c6228f82a1b750d80009d944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::memory_register</definition>
        <argsstring>(void *ptr, size_t size)</argsstring>
        <name>memory_register</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory registration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="275" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a8a0abd88bea205328698830d0972c387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::memory_unregister</definition>
        <argsstring>(void *ptr, size_t size)</argsstring>
        <name>memory_unregister</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="276" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ab8e15c40a23f74ede0aaddbabb21e946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::memory_register_async</definition>
        <argsstring>(void *ptr, size_t size)</argsstring>
        <name>memory_register_async</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory registration async </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="281" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ac006ae56d15a450afc65bc7f26ef5fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::memory_unregister_async</definition>
        <argsstring>(void *ptr, size_t size)</argsstring>
        <name>memory_unregister_async</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="282" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a0f07b515aba0b8d6917cd7d561e6d9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::memory_register_async</definition>
        <argsstring>(team_t *team, void *ptr, const size_t size, int n)</argsstring>
        <name>memory_register_async</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create &apos;n&apos; tasks so that each task i in [0..n-1]<itemizedlist>
<listitem><para>access - commutative write on ptr + i*size/n</para>
</listitem><listitem><para>routine - register/unregister/touch [ptr + i*size/n, MIN(ptr + (i+1)*size/n, ptr+size)]</para>
</listitem></itemizedlist>
</para>
<para>Note: each task may run several &apos;cuMemRegister&apos; several time on a single chunk </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="291" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1adf71cd05569fce0073e4656339e19771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::memory_unregister_async</definition>
        <argsstring>(team_t *team, void *ptr, const size_t size, int n)</argsstring>
        <name>memory_unregister_async</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="292" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aa204842d1a2db54ac05a3d7a5a6c6860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runtime_t::memory_touch_async</definition>
        <argsstring>(team_t *team, void *ptr, const size_t size, int n)</argsstring>
        <name>memory_touch_async</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="293" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a0122be4b73e5335521f4e6e3d4b64483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_commit</definition>
        <argsstring>(task_t *task)</argsstring>
        <name>task_commit</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="305" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a07d1f9154a41321b7b5dae03fcd24bb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_detachable_decr</definition>
        <argsstring>(task_t *task)</argsstring>
        <name>task_detachable_decr</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="308" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a648510a06d67e6db733541d393772230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_detachable_incr</definition>
        <argsstring>(task_t *task)</argsstring>
        <name>task_detachable_incr</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="311" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aa19f903b1095aa64d9fb484023b4b4ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_complete</definition>
        <argsstring>(task_t *task)</argsstring>
        <name>task_complete</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="314" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a43da102808e9a0de915bef55fd643c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_wait</definition>
        <argsstring>(void)</argsstring>
        <name>task_wait</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="317" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ab42587890249d46644d8659c72b2ce0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_enqueue</definition>
        <argsstring>(task_t *task)</argsstring>
        <name>task_enqueue</name>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="323" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a377ae615733c2dd96500ff92077c3ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_thread_enqueue</definition>
        <argsstring>(thread_t *thread, task_t *task)</argsstring>
        <name>task_thread_enqueue</name>
        <param>
          <type><ref refid="structthread__t" kindref="compound">thread_t</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="331" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a484ce49fbedfb6a9cbfea479d27fee2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_team_enqueue</definition>
        <argsstring>(team_t *team, task_t *task)</argsstring>
        <name>task_team_enqueue</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="338" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a0db766523f9332c6e2213b07a56f7963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
        <definition>task_t* runtime_t::task_dup</definition>
        <argsstring>(const task_t *task)</argsstring>
        <name>task_dup</name>
        <param>
          <type>const <ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="346" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aaf8d8b565349d4d8435f04aaaa4aa364" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>task_access_counter_t</type>
            <declname>ac</declname>
            <defname>ac</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>has_set_accesses</declname>
            <defname>has_set_accesses</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>has_split_condition</declname>
            <defname>has_split_condition</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
        <definition>task_t* runtime_t::task_instanciate</definition>
        <argsstring>(const std::function&lt; void(task_t *, access_t *)&gt; &amp;set_accesses, const std::function&lt; bool(task_t *, access_t *)&gt; &amp;split_condition, const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>task_instanciate</name>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>set_accesses</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>split_condition</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="352" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="352" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a6f2e89145329b78964115ecdd8cd5b09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>task_access_counter_t</type>
            <declname>ac</declname>
            <defname>ac</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>has_set_accesses</declname>
            <defname>has_set_accesses</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>has_split_condition</declname>
            <defname>has_split_condition</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void runtime_t::task_spawn</definition>
        <argsstring>(const std::function&lt; void(task_t *, access_t *)&gt; &amp;set_accesses, const std::function&lt; bool(task_t *, access_t *)&gt; &amp;split_condition, const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>task_spawn</name>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>set_accesses</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>split_condition</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="403" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="403" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ae7d4a6b7b8bedd11d39975360f1b9886" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>task_access_counter_t</type>
            <declname>ac</declname>
            <defname>ac</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void runtime_t::task_spawn</definition>
        <argsstring>(const std::function&lt; void(task_t *, access_t *)&gt; &amp;set_accesses, const std::function&lt; bool(task_t *, access_t *)&gt; &amp;split_condition, const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>task_spawn</name>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>set_accesses</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>split_condition</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="419" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="419" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aade7db7fe5ef3534c55f069b30a2a294" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>task_access_counter_t</type>
            <declname>ac</declname>
            <defname>ac</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void runtime_t::task_spawn</definition>
        <argsstring>(const std::function&lt; void(task_t *, access_t *)&gt; &amp;set_accesses, const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>task_spawn</name>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>set_accesses</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="429" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="429" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a0932164c6727f0a731ebb86ca600f9c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_spawn</definition>
        <argsstring>(const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>task_spawn</name>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="437" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="437" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a7a0f0ad20853884dd4e48ce9362fae11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::task_run</definition>
        <argsstring>(team_t *team, thread_t *thread, task_t *task)</argsstring>
        <name>task_run</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type><ref refid="structthread__t" kindref="compound">thread_t</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="446" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a6404b3f02a8c9b4222d3e7c86f394540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::team_create</definition>
        <argsstring>(team_t *team)</argsstring>
        <name>team_create</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="463" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a977cbdfa8c1717f3ebd9e37b19a55bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>worksteal</declname>
            <defname>worksteal</defname>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void runtime_t::team_barrier</definition>
        <argsstring>(team_t *team, thread_t *thread=NULL)</argsstring>
        <name>team_barrier</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type><ref refid="structthread__t" kindref="compound">thread_t</ref> *</type>
          <declname>thread</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="467" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a937c14b18436204bb0371b4b99fd05b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::team_join</definition>
        <argsstring>(team_t *team)</argsstring>
        <name>team_join</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="470" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1af890ebaf373c48af5cd86dbce2a714c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::team_critical_begin</definition>
        <argsstring>(team_t *team)</argsstring>
        <name>team_critical_begin</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="473" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a97383d22990d93465cf3a5055d2f0058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::team_critical_end</definition>
        <argsstring>(team_t *team)</argsstring>
        <name>team_critical_end</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="476" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1af6bde05138e322fdb0ecff91456b70e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::team_parallel_for</definition>
        <argsstring>(team_t *team, team_parallel_for_func_t func)</argsstring>
        <name>team_parallel_for</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type>team_parallel_for_func_t</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="479" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aabf535d7b85a4c0fce6a9e8ae2ed6b24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>task_access_counter_t</type>
            <declname>ac</declname>
            <defname>ac</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>has_set_accesses</declname>
            <defname>has_set_accesses</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>has_split_condition</declname>
            <defname>has_split_condition</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void runtime_t::team_task_spawn</definition>
        <argsstring>(team_t *team, const std::function&lt; void(task_t *, access_t *)&gt; &amp;set_accesses, const std::function&lt; bool(task_t *, access_t *)&gt; &amp;split_condition, const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>team_task_spawn</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>set_accesses</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>split_condition</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="487" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="487" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1abce8da98202f808049b399b5fa0ac79a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>task_access_counter_t</type>
            <declname>ac</declname>
            <defname>ac</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void runtime_t::team_task_spawn</definition>
        <argsstring>(team_t *team, const std::function&lt; void(task_t *, access_t *)&gt; &amp;set_accesses, const std::function&lt; bool(task_t *, access_t *)&gt; &amp;split_condition, const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>team_task_spawn</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>set_accesses</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>split_condition</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="504" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="504" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ad06a5f1ac8adac95b21167be6c7eddd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>task_access_counter_t</type>
            <declname>ac</declname>
            <defname>ac</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void runtime_t::team_task_spawn</definition>
        <argsstring>(team_t *team, const std::function&lt; void(task_t *, access_t *)&gt; &amp;set_accesses, const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>team_task_spawn</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *, <ref refid="classaccess__t" kindref="compound">access_t</ref> *)&gt; &amp;</type>
          <declname>set_accesses</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="515" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="515" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1aed63255c403b480b5c09b90313d9086f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::team_task_spawn</definition>
        <argsstring>(team_t *team, const std::function&lt; void(task_t *)&gt; &amp;f)</argsstring>
        <name>team_task_spawn</name>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type>const std::function&lt; void(<ref refid="structtask__t" kindref="compound">task_t</ref> *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="524" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="524" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a3315769c80ba65c98030d1185e0e5d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
        <definition>team_t* runtime_t::team_get</definition>
        <argsstring>(const driver_type_t type)</argsstring>
        <name>team_get</name>
        <param>
          <type>const driver_type_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="536" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a7a44895adaad556a8021037331ce28d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
        <definition>team_t* runtime_t::team_get_any</definition>
        <argsstring>(const driver_type_bitfield_t types)</argsstring>
        <name>team_get_any</name>
        <param>
          <type>const driver_type_bitfield_t</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="539" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a77483e558e0e1b6e057435025a370472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::power_start</definition>
        <argsstring>(const device_global_id_t device_global_id, power_t *pwr)</argsstring>
        <name>power_start</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type><ref refid="structpower__t" kindref="compound">power_t</ref> *</type>
          <declname>pwr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="546" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a5ab084089aa755a57324f2f62d93ee1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runtime_t::power_stop</definition>
        <argsstring>(const device_global_id_t device_global_id, power_t *pwr)</argsstring>
        <name>power_stop</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <param>
          <type><ref refid="structpower__t" kindref="compound">power_t</ref> *</type>
          <declname>pwr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="549" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a63d18603b238ea600802c206ca81c12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdriver__t" kindref="compound">driver_t</ref> *</type>
        <definition>driver_t* runtime_t::driver_get</definition>
        <argsstring>(const driver_type_t type)</argsstring>
        <name>driver_get</name>
        <param>
          <type>const driver_type_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="556" column="15"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a823005c4e2b499e55b9f455c6f9346aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdevice__t" kindref="compound">device_t</ref> *</type>
        <definition>device_t* runtime_t::device_get</definition>
        <argsstring>(const device_global_id_t device_global_id)</argsstring>
        <name>device_get</name>
        <param>
          <type>const device_global_id_t</type>
          <declname>device_global_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="559" column="15"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1ab40ee46f821f33f70129c17eb72f0d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int runtime_t::get_ndevices</definition>
        <argsstring>(void)</argsstring>
        <name>get_ndevices</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="562" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a2da35eabd6916b665ef1288d9bd4cc0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int runtime_t::get_ndevices_max</definition>
        <argsstring>(void)</argsstring>
        <name>get_ndevices_max</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="565" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structruntime__t_1afdd450ed353c786e757175b295309ca8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void runtime_t::task_enqueue</definition>
        <argsstring>(runtime_t *runtime, task_t *task)</argsstring>
        <name>task_enqueue</name>
        <param>
          <type><ref refid="structruntime__t" kindref="compound">runtime_t</ref> *</type>
          <declname>runtime</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="325" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a8c92c9e34d03f863a48def0fc9f0259e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void runtime_t::task_thread_enqueue</definition>
        <argsstring>(runtime_t *runtime, thread_t *thread, task_t *task)</argsstring>
        <name>task_thread_enqueue</name>
        <param>
          <type><ref refid="structruntime__t" kindref="compound">runtime_t</ref> *</type>
          <declname>runtime</declname>
        </param>
        <param>
          <type><ref refid="structthread__t" kindref="compound">thread_t</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="332" column="24" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a39883e42f00a64dd10f5ad69a134274d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void runtime_t::task_team_enqueue</definition>
        <argsstring>(runtime_t *runtime, team_t *team, task_t *task)</argsstring>
        <name>task_team_enqueue</name>
        <param>
          <type><ref refid="structruntime__t" kindref="compound">runtime_t</ref> *</type>
          <declname>runtime</declname>
        </param>
        <param>
          <type><ref refid="structteam__t" kindref="compound">team_t</ref> *</type>
          <declname>team</declname>
        </param>
        <param>
          <type><ref refid="structtask__t" kindref="compound">task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="340" column="5" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a66d6e93a7987a978d18bcd2b452e76db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void runtime_t::thread_getaffinity</definition>
        <argsstring>(cpu_set_t &amp;cpuset)</argsstring>
        <name>thread_getaffinity</name>
        <param>
          <type>cpu_set_t &amp;</type>
          <declname>cpuset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="453" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structruntime__t_1a1305a80844c1383edb51f414b21d89ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void runtime_t::thread_setaffinity</definition>
        <argsstring>(cpu_set_t &amp;cpuset)</argsstring>
        <name>thread_setaffinity</name>
        <param>
          <type>cpu_set_t &amp;</type>
          <declname>cpuset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="456" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="12">
        <label>team_t</label>
        <link refid="structteam__t"/>
        <childnode refid="13" relation="usage">
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>desc</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>Lockable</label>
        <link refid="classLockable"/>
      </node>
      <node id="21">
        <label>stream_instruction_t</label>
        <link refid="structstream__instruction__t"/>
        <childnode refid="22" relation="usage">
          <edgelabel>file</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>copy_2D</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>callback</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>copy_1D</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>kern</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>conf_stream_t</label>
        <link refid="structconf__stream__t"/>
      </node>
      <node id="13">
        <label>thread_t</label>
        <link refid="structthread__t"/>
        <childnode refid="13" relation="usage">
          <edgelabel>prev</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>team</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>deque</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>current_task</edgelabel>
          <edgelabel>implicit_task</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>stream_instruction_copy_1D_t</label>
        <link refid="structstream__instruction__copy__1D__t"/>
      </node>
      <node id="10">
        <label>drivers_t</label>
        <link refid="structdrivers__t"/>
        <childnode refid="11" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>callback_t</label>
        <link refid="structcallback__t"/>
      </node>
      <node id="22">
        <label>stream_instruction_file_t</label>
        <link refid="structstream__instruction__file__t"/>
      </node>
      <node id="20">
        <label>stream_instruction_queue_t</label>
        <link refid="classstream__instruction__queue__t"/>
        <childnode refid="21" relation="usage">
          <edgelabel>instr</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>area_t</label>
        <link refid="structarea__t"/>
        <childnode refid="31" relation="usage">
          <edgelabel>chunk0</edgelabel>
          <edgelabel>free_chunk_list</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>lock</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>deque_t&lt; task_t *, 4096 &gt;</label>
        <link refid="structdeque__t"/>
      </node>
      <node id="23">
        <label>stream_instruction_copy_2D_t</label>
        <link refid="structstream__instruction__copy__2D__t"/>
        <childnode refid="24" relation="usage">
          <edgelabel>dst_device_view</edgelabel>
          <edgelabel>src_device_view</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>task_formats_t</label>
        <link refid="structtask__formats__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>team_binding_t</label>
        <link refid="structteam__binding__t"/>
      </node>
      <node id="29">
        <label>device_memory_info_t</label>
        <link refid="structdevice__memory__info__t"/>
        <childnode refid="30" relation="usage">
          <edgelabel>area</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>stream_instruction_kernel_t</label>
        <link refid="structstream__instruction__kernel__t"/>
      </node>
      <node id="5">
        <label>conf_drivers_t</label>
        <link refid="structconf__drivers__t"/>
        <childnode refid="6" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>memory_replica_view_t</label>
        <link refid="structmemory__replica__view__t"/>
      </node>
      <node id="6">
        <label>conf_driver_t</label>
        <link refid="structconf__driver__t"/>
      </node>
      <node id="3">
        <label>task_format_t</label>
        <link refid="structtask__format__t"/>
      </node>
      <node id="7">
        <label>conf_device_t</label>
        <link refid="structconf__device__t"/>
        <childnode refid="8" relation="usage">
          <edgelabel>offloader</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>stream_t</label>
        <link refid="classstream__t"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>pending</edgelabel>
          <edgelabel>ready</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>runtime_t</label>
        <link refid="structruntime__t"/>
        <childnode refid="2" relation="usage">
          <edgelabel>list</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>conf</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>drivers</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>router</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>conf_s</label>
        <link refid="structconf__s"/>
        <childnode refid="5" relation="usage">
          <edgelabel>drivers</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>device</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>mutex_t</label>
        <link refid="structmutex__t"/>
      </node>
      <node id="15">
        <label>task_t</label>
        <link refid="structtask__t"/>
        <childnode refid="15" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>RouterAffinity</label>
        <link refid="classRouterAffinity"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>device_t</label>
        <link refid="structdevice__t"/>
        <childnode refid="13" relation="usage">
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>streams</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>memories</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>conf</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>conf_offloader_t</label>
        <link refid="structconf__offloader__t"/>
        <childnode refid="9" relation="usage">
          <edgelabel>streams</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>team_desc_t</label>
        <link refid="structteam__desc__t"/>
        <childnode refid="17" relation="usage">
          <edgelabel>binding</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>area_chunk_t</label>
        <link refid="structarea__chunk__t"/>
        <childnode refid="31" relation="usage">
          <edgelabel>freelink</edgelabel>
          <edgelabel>next</edgelabel>
          <edgelabel>prev</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>driver_t</label>
        <link refid="structdriver__t"/>
        <childnode refid="12" relation="usage">
          <edgelabel>team</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>f_stream_create</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>devices</edgelabel>
          <edgelabel>f_device_create</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>Router</label>
        <link refid="classRouter"/>
      </node>
    </collaborationgraph>
    <location file="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" line="65" column="1" bodyfile="/home/rpereira/repo/xktrucs/xkaapi/include/xkrt/runtime.h" bodystart="66" bodyend="591"/>
    <listofallmembers>
      <member refid="structruntime__t_1a52313ecd23346d2ec1eebbf53d2aa9ed" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>conf</name></member>
      <member refid="structruntime__t_1a03e2cc271e158eeae0fe699cdb6f9be5" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>copy</name></member>
      <member refid="structruntime__t_1ad70f3e8f5f904524730829b0c8827f25" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>copy</name></member>
      <member refid="structruntime__t_1ac592ac6ade0c7dd6516492204697508a" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>copy_async</name></member>
      <member refid="structruntime__t_1a26822d65e315bf3cc26e9a587622616f" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>deinit</name></member>
      <member refid="structruntime__t_1a823005c4e2b499e55b9f455c6f9346aa" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>device_get</name></member>
      <member refid="structruntime__t_1a18b9d6a2be59ee0c31e4897a53cbb842" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>distribute_async</name></member>
      <member refid="structruntime__t_1a02d61a092da536eb1ee4a0b31c8d062b" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>distribute_async</name></member>
      <member refid="structruntime__t_1a7e2113f1ada61e884c729808868c698a" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>distribute_async</name></member>
      <member refid="structruntime__t_1a63d18603b238ea600802c206ca81c12c" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>driver_get</name></member>
      <member refid="structruntime__t_1a6db76aa6a655cc85f15de99efa40b0f5" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>drivers</name></member>
      <member refid="structruntime__t_1a2887c5b63ec50ea985033285e70a3f7d" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>file_foreach_chunk</name></member>
      <member refid="structruntime__t_1ac9ab04a270e98b3780068daf780fb1c3" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>file_read_async</name></member>
      <member refid="structruntime__t_1a5b1f4d670531c86f34f6ff98171a3ad7" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>file_read_async</name></member>
      <member refid="structruntime__t_1a5b4978ba7768258badf5dd6ef260a6b3" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>file_write_async</name></member>
      <member refid="structruntime__t_1a0dd90b23d01ddf8ce39ebf7577898528" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>file_write_async</name></member>
      <member refid="structruntime__t_1ab7abe366c39d395ead4fe497760fbd35" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>formats</name></member>
      <member refid="structruntime__t_1ab40ee46f821f33f70129c17eb72f0d77" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>get_ndevices</name></member>
      <member refid="structruntime__t_1a2da35eabd6916b665ef1288d9bd4cc0b" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>get_ndevices_max</name></member>
      <member refid="structruntime__t_1a6ef8562e582140ce9e818b24109db7f3" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>host_capture</name></member>
      <member refid="structruntime__t_1a1bd05b1239fcce4707f9411a4619ee9b" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>init</name></member>
      <member refid="structruntime__t_1aff19f16b387a560d57911083873795fb" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>list</name></member>
      <member refid="structruntime__t_1a3e647efeb9794a8cab492819e79bbcfa" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_device_allocate</name></member>
      <member refid="structruntime__t_1a9ec25bb23ad5afd8c278ab4f277d20e2" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_device_allocate_on</name></member>
      <member refid="structruntime__t_1adb6398ebad83a9fe339ae041adab7dbf" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_device_deallocate</name></member>
      <member refid="structruntime__t_1aa901230cee3e970454ccc716a3caa755" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_device_deallocate_all</name></member>
      <member refid="structruntime__t_1aade95bbdc547b8bbd4dab91cd5251489" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_device_preallocate_ensure</name></member>
      <member refid="structruntime__t_1a08a41b1b850328cf73a2e8bf792dcd13" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_host_allocate</name></member>
      <member refid="structruntime__t_1ac665d5425fe061b9fadc5d3c25b7bf75" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_host_coherent_async</name></member>
      <member refid="structruntime__t_1af32b58e45f9bd1d9780a0d0b2ea8e157" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_host_coherent_async</name></member>
      <member refid="structruntime__t_1af3f7a56f268ea2397f6c472612fb4002" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_host_deallocate</name></member>
      <member refid="structruntime__t_1a1dc55af8c6228f82a1b750d80009d944" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_register</name></member>
      <member refid="structruntime__t_1aa77eb6c2cdb9bdf72e736f0e41f16a68" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_register_async</name></member>
      <member refid="structruntime__t_1ab8e15c40a23f74ede0aaddbabb21e946" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_register_async</name></member>
      <member refid="structruntime__t_1a0f07b515aba0b8d6917cd7d561e6d9b5" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_register_async</name></member>
      <member refid="structruntime__t_1a2581df6601d2d592a5753ef9d06329bd" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_replicate_coherent</name></member>
      <member refid="structruntime__t_1ae6710af2a5845ff6613d31a4868789b8" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_replicate_coherent</name></member>
      <member refid="structruntime__t_1a7ad1e015c2ac270d444c50217ce0e87c" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_replicate_noncoherent</name></member>
      <member refid="structruntime__t_1a6efc57bb7f68c9ad2c02614db011ce44" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_replicate_noncoherent</name></member>
      <member refid="structruntime__t_1a021f2e2153083d0652948c97ae3159ae" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_touch_async</name></member>
      <member refid="structruntime__t_1aa204842d1a2db54ac05a3d7a5a6c6860" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_touch_async</name></member>
      <member refid="structruntime__t_1aed705264490216e1031214005e3918c2" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_unified_allocate</name></member>
      <member refid="structruntime__t_1ac222cca87a19fe46023151d2f2feb89a" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_unified_deallocate</name></member>
      <member refid="structruntime__t_1a8a0abd88bea205328698830d0972c387" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_unregister</name></member>
      <member refid="structruntime__t_1aa56834204f18d66330bb1a6ad9f739f6" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_unregister_async</name></member>
      <member refid="structruntime__t_1ac006ae56d15a450afc65bc7f26ef5fa7" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_unregister_async</name></member>
      <member refid="structruntime__t_1adf71cd05569fce0073e4656339e19771" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>memory_unregister_async</name></member>
      <member refid="structruntime__t_1a77483e558e0e1b6e057435025a370472" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>power_start</name></member>
      <member refid="structruntime__t_1a5ab084089aa755a57324f2f62d93ee1f" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>power_stop</name></member>
      <member refid="structruntime__t_1a87c58b87e6b2c3c433b55dac96496794" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>reset</name></member>
      <member refid="structruntime__t_1abf9e7d0e4af748ae32237010ff081f97" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>router</name></member>
      <member refid="structruntime__t_1a109e8744c74b15b0a1944c40f39e89a9" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>state</name></member>
      <member refid="structruntime__t_1a0122be4b73e5335521f4e6e3d4b64483" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_commit</name></member>
      <member refid="structruntime__t_1aa19f903b1095aa64d9fb484023b4b4ae" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_complete</name></member>
      <member refid="structruntime__t_1a07d1f9154a41321b7b5dae03fcd24bb1" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_detachable_decr</name></member>
      <member refid="structruntime__t_1a648510a06d67e6db733541d393772230" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_detachable_incr</name></member>
      <member refid="structruntime__t_1a0db766523f9332c6e2213b07a56f7963" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_dup</name></member>
      <member refid="structruntime__t_1ab42587890249d46644d8659c72b2ce0f" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_enqueue</name></member>
      <member refid="structruntime__t_1afdd450ed353c786e757175b295309ca8" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_enqueue</name></member>
      <member refid="structruntime__t_1aaf8d8b565349d4d8435f04aaaa4aa364" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_instanciate</name></member>
      <member refid="structruntime__t_1a7a0f0ad20853884dd4e48ce9362fae11" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_run</name></member>
      <member refid="structruntime__t_1a6f2e89145329b78964115ecdd8cd5b09" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_spawn</name></member>
      <member refid="structruntime__t_1ae7d4a6b7b8bedd11d39975360f1b9886" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_spawn</name></member>
      <member refid="structruntime__t_1aade7db7fe5ef3534c55f069b30a2a294" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_spawn</name></member>
      <member refid="structruntime__t_1a0932164c6727f0a731ebb86ca600f9c5" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_spawn</name></member>
      <member refid="structruntime__t_1a484ce49fbedfb6a9cbfea479d27fee2d" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_team_enqueue</name></member>
      <member refid="structruntime__t_1a39883e42f00a64dd10f5ad69a134274d" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_team_enqueue</name></member>
      <member refid="structruntime__t_1a377ae615733c2dd96500ff92077c3ff4" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_thread_enqueue</name></member>
      <member refid="structruntime__t_1a8c92c9e34d03f863a48def0fc9f0259e" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_thread_enqueue</name></member>
      <member refid="structruntime__t_1a43da102808e9a0de915bef55fd643c5d" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>task_wait</name></member>
      <member refid="structruntime__t_1a977cbdfa8c1717f3ebd9e37b19a55bc4" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_barrier</name></member>
      <member refid="structruntime__t_1a6404b3f02a8c9b4222d3e7c86f394540" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_create</name></member>
      <member refid="structruntime__t_1af890ebaf373c48af5cd86dbce2a714c1" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_critical_begin</name></member>
      <member refid="structruntime__t_1a97383d22990d93465cf3a5055d2f0058" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_critical_end</name></member>
      <member refid="structruntime__t_1a3315769c80ba65c98030d1185e0e5d70" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_get</name></member>
      <member refid="structruntime__t_1a7a44895adaad556a8021037331ce28d0" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_get_any</name></member>
      <member refid="structruntime__t_1a937c14b18436204bb0371b4b99fd05b6" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_join</name></member>
      <member refid="structruntime__t_1af6bde05138e322fdb0ecff91456b70e1" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_parallel_for</name></member>
      <member refid="structruntime__t_1aabf535d7b85a4c0fce6a9e8ae2ed6b24" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_task_spawn</name></member>
      <member refid="structruntime__t_1abce8da98202f808049b399b5fa0ac79a" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_task_spawn</name></member>
      <member refid="structruntime__t_1ad06a5f1ac8adac95b21167be6c7eddd0" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_task_spawn</name></member>
      <member refid="structruntime__t_1aed63255c403b480b5c09b90313d9086f" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>team_task_spawn</name></member>
      <member refid="structruntime__t_1a66d6e93a7987a978d18bcd2b452e76db" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>thread_getaffinity</name></member>
      <member refid="structruntime__t_1a1305a80844c1383edb51f414b21d89ba" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>thread_setaffinity</name></member>
      <member refid="structruntime__t_1a931d6fd7b67b9eda8bbdc42385e0ec31" prot="public" virt="non-virtual"><scope>runtime_t</scope><name>topology</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
